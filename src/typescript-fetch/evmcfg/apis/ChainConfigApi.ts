/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  FunctionSpaceEventTypesCriteria,
  FunctionSpaceEventTypesDetails,
  FunctionSpaceEventTypesToBeChanged,
  FunctionSpaceTypesCriteria,
  FunctionSpaceTypesDetails,
  FunctionSpaceTypesToBeChanged,
  MealTypesCriteria,
  MealTypesDetails,
  MealTypesToBeChanged,
  Status,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FunctionSpaceEventTypesCriteriaFromJSON,
    FunctionSpaceEventTypesCriteriaToJSON,
    FunctionSpaceEventTypesDetailsFromJSON,
    FunctionSpaceEventTypesDetailsToJSON,
    FunctionSpaceEventTypesToBeChangedFromJSON,
    FunctionSpaceEventTypesToBeChangedToJSON,
    FunctionSpaceTypesCriteriaFromJSON,
    FunctionSpaceTypesCriteriaToJSON,
    FunctionSpaceTypesDetailsFromJSON,
    FunctionSpaceTypesDetailsToJSON,
    FunctionSpaceTypesToBeChangedFromJSON,
    FunctionSpaceTypesToBeChangedToJSON,
    MealTypesCriteriaFromJSON,
    MealTypesCriteriaToJSON,
    MealTypesDetailsFromJSON,
    MealTypesDetailsToJSON,
    MealTypesToBeChangedFromJSON,
    MealTypesToBeChangedToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ChangeFunctionSpaceEventTypesRequest {
    eventTypeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceEventTypesToBeChanged: FunctionSpaceEventTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFunctionSpaceTypesRequest {
    functionSpaceTypesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMealTypesRequest {
    mealTypesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceEventTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMealTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFunctionSpaceEventTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceEventTypesCriteria: FunctionSpaceEventTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFunctionSpaceTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceTypesCriteria: FunctionSpaceTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMealTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    mealTypesCriteria: MealTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFunctionSpaceTypesRequest {
    functionSpaceTypesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceTypesToBeChanged: FunctionSpaceTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMealTypesRequest {
    mealTypesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    mealTypesToBeChanged: MealTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFunctionSpaceEventTypesRequest {
    eventTypeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Function Space Event Types. <p><strong>OperationId:</strong>changeFunctionSpaceEventTypes</p>
     * Change Function Space Event Types
     */
    async changeFunctionSpaceEventTypesRaw(requestParameters: ChangeFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.eventTypeCode === null || requestParameters.eventTypeCode === undefined) {
            throw new runtime.RequiredError('eventTypeCode','Required parameter requestParameters.eventTypeCode was null or undefined when calling changeFunctionSpaceEventTypes.');
        }
        
        if (requestParameters.functionSpaceEventTypesToBeChanged === null || requestParameters.functionSpaceEventTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('functionSpaceEventTypesToBeChanged','Required parameter requestParameters.functionSpaceEventTypesToBeChanged was null or undefined when calling changeFunctionSpaceEventTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringEventTypes/{eventTypeCode}`.replace(`{${"eventTypeCode"}}`, encodeURIComponent(String(requestParameters.eventTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceEventTypesToBeChangedToJSON(requestParameters.functionSpaceEventTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Function Space Event Types. <p><strong>OperationId:</strong>changeFunctionSpaceEventTypes</p>
     * Change Function Space Event Types
     */
    async changeFunctionSpaceEventTypes(requestParameters: ChangeFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFunctionSpaceEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Function Space Types. <p><strong>OperationId:</strong>deleteFunctionSpaceTypes</p>
     * Delete Function Space Types
     */
    async deleteFunctionSpaceTypesRaw(requestParameters: DeleteFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceTypesId === null || requestParameters.functionSpaceTypesId === undefined) {
            throw new runtime.RequiredError('functionSpaceTypesId','Required parameter requestParameters.functionSpaceTypesId was null or undefined when calling deleteFunctionSpaceTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceTypes/{functionSpaceTypesId}`.replace(`{${"functionSpaceTypesId"}}`, encodeURIComponent(String(requestParameters.functionSpaceTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Function Space Types. <p><strong>OperationId:</strong>deleteFunctionSpaceTypes</p>
     * Delete Function Space Types
     */
    async deleteFunctionSpaceTypes(requestParameters: DeleteFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFunctionSpaceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Meal Types. <p><strong>OperationId:</strong>deleteMealTypes</p>
     * Delete Meal Types
     */
    async deleteMealTypesRaw(requestParameters: DeleteMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.mealTypesId === null || requestParameters.mealTypesId === undefined) {
            throw new runtime.RequiredError('mealTypesId','Required parameter requestParameters.mealTypesId was null or undefined when calling deleteMealTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mealTypes/{mealTypesId}`.replace(`{${"mealTypesId"}}`, encodeURIComponent(String(requestParameters.mealTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Meal Types. <p><strong>OperationId:</strong>deleteMealTypes</p>
     * Delete Meal Types
     */
    async deleteMealTypes(requestParameters: DeleteMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMealTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Function Space Event Types. <p><strong>OperationId:</strong>getFunctionSpaceEventTypes</p>
     * Get Function Space Event Types
     */
    async getFunctionSpaceEventTypesRaw(requestParameters: GetFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceEventTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringEventTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceEventTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Function Space Event Types. <p><strong>OperationId:</strong>getFunctionSpaceEventTypes</p>
     * Get Function Space Event Types
     */
    async getFunctionSpaceEventTypes(requestParameters: GetFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceEventTypesDetails> {
        const response = await this.getFunctionSpaceEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Function Space Types. <p><strong>OperationId:</strong>getFunctionSpaceTypes</p>
     * Get Function Space Types
     */
    async getFunctionSpaceTypesRaw(requestParameters: GetFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Function Space Types. <p><strong>OperationId:</strong>getFunctionSpaceTypes</p>
     * Get Function Space Types
     */
    async getFunctionSpaceTypes(requestParameters: GetFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceTypesDetails> {
        const response = await this.getFunctionSpaceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Meal Types. <p><strong>OperationId:</strong>getMealTypes</p>
     * Get Meal Types
     */
    async getMealTypesRaw(requestParameters: GetMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MealTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mealTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MealTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Meal Types. <p><strong>OperationId:</strong>getMealTypes</p>
     * Get Meal Types
     */
    async getMealTypes(requestParameters: GetMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MealTypesDetails> {
        const response = await this.getMealTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Function Space Event Types. <p><strong>OperationId:</strong>postFunctionSpaceEventTypes</p>
     * Create Function Space Event Types
     */
    async postFunctionSpaceEventTypesRaw(requestParameters: PostFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceEventTypesCriteria === null || requestParameters.functionSpaceEventTypesCriteria === undefined) {
            throw new runtime.RequiredError('functionSpaceEventTypesCriteria','Required parameter requestParameters.functionSpaceEventTypesCriteria was null or undefined when calling postFunctionSpaceEventTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringEventTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceEventTypesCriteriaToJSON(requestParameters.functionSpaceEventTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Function Space Event Types. <p><strong>OperationId:</strong>postFunctionSpaceEventTypes</p>
     * Create Function Space Event Types
     */
    async postFunctionSpaceEventTypes(requestParameters: PostFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFunctionSpaceEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Function Space Types. <p><strong>OperationId:</strong>postFunctionSpaceTypes</p>
     * Create Function Space Types
     */
    async postFunctionSpaceTypesRaw(requestParameters: PostFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceTypesCriteria === null || requestParameters.functionSpaceTypesCriteria === undefined) {
            throw new runtime.RequiredError('functionSpaceTypesCriteria','Required parameter requestParameters.functionSpaceTypesCriteria was null or undefined when calling postFunctionSpaceTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceTypesCriteriaToJSON(requestParameters.functionSpaceTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Function Space Types. <p><strong>OperationId:</strong>postFunctionSpaceTypes</p>
     * Create Function Space Types
     */
    async postFunctionSpaceTypes(requestParameters: PostFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFunctionSpaceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Meal Types. <p><strong>OperationId:</strong>postMealTypes</p>
     * Create Meal Types
     */
    async postMealTypesRaw(requestParameters: PostMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.mealTypesCriteria === null || requestParameters.mealTypesCriteria === undefined) {
            throw new runtime.RequiredError('mealTypesCriteria','Required parameter requestParameters.mealTypesCriteria was null or undefined when calling postMealTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mealTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MealTypesCriteriaToJSON(requestParameters.mealTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Meal Types. <p><strong>OperationId:</strong>postMealTypes</p>
     * Create Meal Types
     */
    async postMealTypes(requestParameters: PostMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMealTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Function Space Types. <p><strong>OperationId:</strong>putFunctionSpaceTypes</p>
     * Change Function Space Types
     */
    async putFunctionSpaceTypesRaw(requestParameters: PutFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceTypesId === null || requestParameters.functionSpaceTypesId === undefined) {
            throw new runtime.RequiredError('functionSpaceTypesId','Required parameter requestParameters.functionSpaceTypesId was null or undefined when calling putFunctionSpaceTypes.');
        }
        
        if (requestParameters.functionSpaceTypesToBeChanged === null || requestParameters.functionSpaceTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('functionSpaceTypesToBeChanged','Required parameter requestParameters.functionSpaceTypesToBeChanged was null or undefined when calling putFunctionSpaceTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceTypes/{functionSpaceTypesId}`.replace(`{${"functionSpaceTypesId"}}`, encodeURIComponent(String(requestParameters.functionSpaceTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceTypesToBeChangedToJSON(requestParameters.functionSpaceTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Function Space Types. <p><strong>OperationId:</strong>putFunctionSpaceTypes</p>
     * Change Function Space Types
     */
    async putFunctionSpaceTypes(requestParameters: PutFunctionSpaceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFunctionSpaceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Meal Types. <p><strong>OperationId:</strong>putMealTypes</p>
     * Change Meal Types
     */
    async putMealTypesRaw(requestParameters: PutMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.mealTypesId === null || requestParameters.mealTypesId === undefined) {
            throw new runtime.RequiredError('mealTypesId','Required parameter requestParameters.mealTypesId was null or undefined when calling putMealTypes.');
        }
        
        if (requestParameters.mealTypesToBeChanged === null || requestParameters.mealTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('mealTypesToBeChanged','Required parameter requestParameters.mealTypesToBeChanged was null or undefined when calling putMealTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mealTypes/{mealTypesId}`.replace(`{${"mealTypesId"}}`, encodeURIComponent(String(requestParameters.mealTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MealTypesToBeChangedToJSON(requestParameters.mealTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Meal Types. <p><strong>OperationId:</strong>putMealTypes</p>
     * Change Meal Types
     */
    async putMealTypes(requestParameters: PutMealTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMealTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Function Space Event Types. <p><strong>OperationId:</strong>removeFunctionSpaceEventTypes</p>
     * Delete Function Space Event Types
     */
    async removeFunctionSpaceEventTypesRaw(requestParameters: RemoveFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.eventTypeCode === null || requestParameters.eventTypeCode === undefined) {
            throw new runtime.RequiredError('eventTypeCode','Required parameter requestParameters.eventTypeCode was null or undefined when calling removeFunctionSpaceEventTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringEventTypes/{eventTypeCode}`.replace(`{${"eventTypeCode"}}`, encodeURIComponent(String(requestParameters.eventTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Function Space Event Types. <p><strong>OperationId:</strong>removeFunctionSpaceEventTypes</p>
     * Delete Function Space Event Types
     */
    async removeFunctionSpaceEventTypes(requestParameters: RemoveFunctionSpaceEventTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFunctionSpaceEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
