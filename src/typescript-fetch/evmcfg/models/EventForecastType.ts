/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventForecastInfoType } from './EventForecastInfoType';
import {
    EventForecastInfoTypeFromJSON,
    EventForecastInfoTypeFromJSONTyped,
    EventForecastInfoTypeToJSON,
} from './EventForecastInfoType';
import type { EventForecastRevDetailType } from './EventForecastRevDetailType';
import {
    EventForecastRevDetailTypeFromJSON,
    EventForecastRevDetailTypeFromJSONTyped,
    EventForecastRevDetailTypeToJSON,
} from './EventForecastRevDetailType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for managing forecast for any event.
 * @export
 * @interface EventForecastType
 */
export interface EventForecastType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof EventForecastType
     */
    forecastId?: UniqueIDType;
    /**
     * Hotel Code to which the Event Forecast belongs to.
     * @type {string}
     * @memberof EventForecastType
     */
    hotelId?: string;
    /**
     * Provides information about the event forecast.
     * @type {Array<EventForecastInfoType>}
     * @memberof EventForecastType
     */
    forecastInfo?: Array<EventForecastInfoType>;
    /**
     * Collection of Event Forecast Revenue Details.
     * @type {Array<EventForecastRevDetailType>}
     * @memberof EventForecastType
     */
    revenueDetails?: Array<EventForecastRevDetailType>;
}

/**
 * Check if a given object implements the EventForecastType interface.
 */
export function instanceOfEventForecastType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventForecastTypeFromJSON(json: any): EventForecastType {
    return EventForecastTypeFromJSONTyped(json, false);
}

export function EventForecastTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventForecastType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'forecastId': !exists(json, 'forecastId') ? undefined : UniqueIDTypeFromJSON(json['forecastId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'forecastInfo': !exists(json, 'forecastInfo') ? undefined : ((json['forecastInfo'] as Array<any>).map(EventForecastInfoTypeFromJSON)),
        'revenueDetails': !exists(json, 'revenueDetails') ? undefined : ((json['revenueDetails'] as Array<any>).map(EventForecastRevDetailTypeFromJSON)),
    };
}

export function EventForecastTypeToJSON(value?: EventForecastType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'forecastId': UniqueIDTypeToJSON(value.forecastId),
        'hotelId': value.hotelId,
        'forecastInfo': value.forecastInfo === undefined ? undefined : ((value.forecastInfo as Array<any>).map(EventForecastInfoTypeToJSON)),
        'revenueDetails': value.revenueDetails === undefined ? undefined : ((value.revenueDetails as Array<any>).map(EventForecastRevDetailTypeToJSON)),
    };
}

