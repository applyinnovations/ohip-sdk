/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventForecastsListType } from './EventForecastsListType';
import {
    EventForecastsListTypeFromJSON,
    EventForecastsListTypeFromJSONTyped,
    EventForecastsListTypeToJSON,
} from './EventForecastsListType';

/**
 * Copy event forecasts criteria type to copy multiple event forecasts from one Hotel to another Hotel.
 * @export
 * @interface CopyEventForecastsCriteriaType
 */
export interface CopyEventForecastsCriteriaType {
    /**
     * Provides Event Forecast details that needs to be copied.
     * @type {Array<EventForecastsListType>}
     * @memberof CopyEventForecastsCriteriaType
     */
    eventForecastsList?: Array<EventForecastsListType>;
    /**
     * include Revenue Types for the event forecasts?
     * @type {boolean}
     * @memberof CopyEventForecastsCriteriaType
     */
    includeRevenueType?: boolean;
}

/**
 * Check if a given object implements the CopyEventForecastsCriteriaType interface.
 */
export function instanceOfCopyEventForecastsCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyEventForecastsCriteriaTypeFromJSON(json: any): CopyEventForecastsCriteriaType {
    return CopyEventForecastsCriteriaTypeFromJSONTyped(json, false);
}

export function CopyEventForecastsCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyEventForecastsCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventForecastsList': !exists(json, 'eventForecastsList') ? undefined : ((json['eventForecastsList'] as Array<any>).map(EventForecastsListTypeFromJSON)),
        'includeRevenueType': !exists(json, 'includeRevenueType') ? undefined : json['includeRevenueType'],
    };
}

export function CopyEventForecastsCriteriaTypeToJSON(value?: CopyEventForecastsCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventForecastsList': value.eventForecastsList === undefined ? undefined : ((value.eventForecastsList as Array<any>).map(EventForecastsListTypeToJSON)),
        'includeRevenueType': value.includeRevenueType,
    };
}

