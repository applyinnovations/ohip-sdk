/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringMenuItemClassInfoType } from './CateringMenuItemClassInfoType';
import {
    CateringMenuItemClassInfoTypeFromJSON,
    CateringMenuItemClassInfoTypeFromJSONTyped,
    CateringMenuItemClassInfoTypeToJSON,
} from './CateringMenuItemClassInfoType';
import type { CateringMenuItemType } from './CateringMenuItemType';
import {
    CateringMenuItemTypeFromJSON,
    CateringMenuItemTypeFromJSONTyped,
    CateringMenuItemTypeToJSON,
} from './CateringMenuItemType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Menu Item Class Values.
 * @export
 * @interface CateringMenuItemClassType
 */
export interface CateringMenuItemClassType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringMenuItemClassType
     */
    id?: UniqueIDType;
    /**
     * 
     * @type {CateringMenuItemClassInfoType}
     * @memberof CateringMenuItemClassType
     */
    itemClassInfo?: CateringMenuItemClassInfoType;
    /**
     * List of Values of Menu Item.
     * @type {Array<CateringMenuItemType>}
     * @memberof CateringMenuItemClassType
     */
    itemList?: Array<CateringMenuItemType>;
}

/**
 * Check if a given object implements the CateringMenuItemClassType interface.
 */
export function instanceOfCateringMenuItemClassType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringMenuItemClassTypeFromJSON(json: any): CateringMenuItemClassType {
    return CateringMenuItemClassTypeFromJSONTyped(json, false);
}

export function CateringMenuItemClassTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringMenuItemClassType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : UniqueIDTypeFromJSON(json['id']),
        'itemClassInfo': !exists(json, 'itemClassInfo') ? undefined : CateringMenuItemClassInfoTypeFromJSON(json['itemClassInfo']),
        'itemList': !exists(json, 'itemList') ? undefined : ((json['itemList'] as Array<any>).map(CateringMenuItemTypeFromJSON)),
    };
}

export function CateringMenuItemClassTypeToJSON(value?: CateringMenuItemClassType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': UniqueIDTypeToJSON(value.id),
        'itemClassInfo': CateringMenuItemClassInfoTypeToJSON(value.itemClassInfo),
        'itemList': value.itemList === undefined ? undefined : ((value.itemList as Array<any>).map(CateringMenuItemTypeToJSON)),
    };
}

