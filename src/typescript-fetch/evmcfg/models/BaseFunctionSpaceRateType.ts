/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { FunctionSpaceRateTypeType } from './FunctionSpaceRateTypeType';
import {
    FunctionSpaceRateTypeTypeFromJSON,
    FunctionSpaceRateTypeTypeFromJSONTyped,
    FunctionSpaceRateTypeTypeToJSON,
} from './FunctionSpaceRateTypeType';
import type { TranslationTextType200 } from './TranslationTextType200';
import {
    TranslationTextType200FromJSON,
    TranslationTextType200FromJSONTyped,
    TranslationTextType200ToJSON,
} from './TranslationTextType200';

/**
 * Base type provides information about Catering Code which will be used for removal operation
 * @export
 * @interface BaseFunctionSpaceRateType
 */
export interface BaseFunctionSpaceRateType {
    /**
     * Code is used to identify a Catering Code.
     * @type {string}
     * @memberof BaseFunctionSpaceRateType
     */
    code?: string;
    /**
     * Code ID is used to identify a Catering Code by ID.
     * @type {number}
     * @memberof BaseFunctionSpaceRateType
     */
    codeId?: number;
    /**
     * Indicates that this rate is the default for the function space.
     * @type {boolean}
     * @memberof BaseFunctionSpaceRateType
     */
    _default?: boolean;
    /**
     * Catering Codes display sequence Number
     * @type {number}
     * @memberof BaseFunctionSpaceRateType
     */
    displaySequence?: number;
    /**
     * Indicates that this rate is computed per hour.
     * @type {boolean}
     * @memberof BaseFunctionSpaceRateType
     */
    hourly?: boolean;
    /**
     * Indicates that this rate is inactive.
     * @type {boolean}
     * @memberof BaseFunctionSpaceRateType
     */
    inactive?: boolean;
    /**
     * Indicates that minimum revenue should be enforced for this rate code.
     * @type {boolean}
     * @memberof BaseFunctionSpaceRateType
     */
    minimunRevenue?: boolean;
    /**
     * 
     * @type {FunctionSpaceRateTypeType}
     * @memberof BaseFunctionSpaceRateType
     */
    rateType?: FunctionSpaceRateTypeType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof BaseFunctionSpaceRateType
     */
    rentAmount?: CurrencyAmountType;
    /**
     * Catering revenue type used for function space rent amount.
     * @type {string}
     * @memberof BaseFunctionSpaceRateType
     */
    revenueType?: string;
    /**
     * 
     * @type {TranslationTextType200}
     * @memberof BaseFunctionSpaceRateType
     */
    translatableDescription?: TranslationTextType200;
}

/**
 * Check if a given object implements the BaseFunctionSpaceRateType interface.
 */
export function instanceOfBaseFunctionSpaceRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BaseFunctionSpaceRateTypeFromJSON(json: any): BaseFunctionSpaceRateType {
    return BaseFunctionSpaceRateTypeFromJSONTyped(json, false);
}

export function BaseFunctionSpaceRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseFunctionSpaceRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'codeId': !exists(json, 'codeId') ? undefined : json['codeId'],
        '_default': !exists(json, 'default') ? undefined : json['default'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'hourly': !exists(json, 'hourly') ? undefined : json['hourly'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'minimunRevenue': !exists(json, 'minimunRevenue') ? undefined : json['minimunRevenue'],
        'rateType': !exists(json, 'rateType') ? undefined : FunctionSpaceRateTypeTypeFromJSON(json['rateType']),
        'rentAmount': !exists(json, 'rentAmount') ? undefined : CurrencyAmountTypeFromJSON(json['rentAmount']),
        'revenueType': !exists(json, 'revenueType') ? undefined : json['revenueType'],
        'translatableDescription': !exists(json, 'translatableDescription') ? undefined : TranslationTextType200FromJSON(json['translatableDescription']),
    };
}

export function BaseFunctionSpaceRateTypeToJSON(value?: BaseFunctionSpaceRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'codeId': value.codeId,
        'default': value._default,
        'displaySequence': value.displaySequence,
        'hourly': value.hourly,
        'inactive': value.inactive,
        'minimunRevenue': value.minimunRevenue,
        'rateType': FunctionSpaceRateTypeTypeToJSON(value.rateType),
        'rentAmount': CurrencyAmountTypeToJSON(value.rentAmount),
        'revenueType': value.revenueType,
        'translatableDescription': TranslationTextType200ToJSON(value.translatableDescription),
    };
}

