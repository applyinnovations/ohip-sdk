/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TargetFunctionSpaceType } from './TargetFunctionSpaceType';
import {
    TargetFunctionSpaceTypeFromJSON,
    TargetFunctionSpaceTypeFromJSONTyped,
    TargetFunctionSpaceTypeToJSON,
} from './TargetFunctionSpaceType';

/**
 * Primary details of function space to be copied and collection of function spaces to be created from it.
 * @export
 * @interface CopyFunctionSpaceType
 */
export interface CopyFunctionSpaceType {
    /**
     * Hotel code of source function space that will serve as the basis for the target function spaces.
     * @type {string}
     * @memberof CopyFunctionSpaceType
     */
    sourceHotelCode?: string;
    /**
     * Room number of source function space that will serve as the basis for the target function spaces.
     * @type {string}
     * @memberof CopyFunctionSpaceType
     */
    sourceRoomNumber?: string;
    /**
     * Function Space details that may differ from the source function space.
     * @type {Array<TargetFunctionSpaceType>}
     * @memberof CopyFunctionSpaceType
     */
    targetFunctionSpace?: Array<TargetFunctionSpaceType>;
}

/**
 * Check if a given object implements the CopyFunctionSpaceType interface.
 */
export function instanceOfCopyFunctionSpaceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyFunctionSpaceTypeFromJSON(json: any): CopyFunctionSpaceType {
    return CopyFunctionSpaceTypeFromJSONTyped(json, false);
}

export function CopyFunctionSpaceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyFunctionSpaceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceHotelCode': !exists(json, 'sourceHotelCode') ? undefined : json['sourceHotelCode'],
        'sourceRoomNumber': !exists(json, 'sourceRoomNumber') ? undefined : json['sourceRoomNumber'],
        'targetFunctionSpace': !exists(json, 'targetFunctionSpace') ? undefined : ((json['targetFunctionSpace'] as Array<any>).map(TargetFunctionSpaceTypeFromJSON)),
    };
}

export function CopyFunctionSpaceTypeToJSON(value?: CopyFunctionSpaceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceHotelCode': value.sourceHotelCode,
        'sourceRoomNumber': value.sourceRoomNumber,
        'targetFunctionSpace': value.targetFunctionSpace === undefined ? undefined : ((value.targetFunctionSpace as Array<any>).map(TargetFunctionSpaceTypeToJSON)),
    };
}

