/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringCodesType } from './CateringCodesType';
import {
    CateringCodesTypeFromJSON,
    CateringCodesTypeFromJSONTyped,
    CateringCodesTypeToJSON,
} from './CateringCodesType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface PostCateringRentalCodesRequest
 */
export interface PostCateringRentalCodesRequest {
    /**
     * 
     * @type {Links}
     * @memberof PostCateringRentalCodesRequest
     */
    links?: Links;
    /**
     * 
     * @type {CateringCodesType}
     * @memberof PostCateringRentalCodesRequest
     */
    rentalCodes?: CateringCodesType;
    /**
     * 
     * @type {WarningsType}
     * @memberof PostCateringRentalCodesRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the PostCateringRentalCodesRequest interface.
 */
export function instanceOfPostCateringRentalCodesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostCateringRentalCodesRequestFromJSON(json: any): PostCateringRentalCodesRequest {
    return PostCateringRentalCodesRequestFromJSONTyped(json, false);
}

export function PostCateringRentalCodesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCateringRentalCodesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'rentalCodes': !exists(json, 'rentalCodes') ? undefined : CateringCodesTypeFromJSON(json['rentalCodes']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function PostCateringRentalCodesRequestToJSON(value?: PostCateringRentalCodesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'rentalCodes': CateringCodesTypeToJSON(value.rentalCodes),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

