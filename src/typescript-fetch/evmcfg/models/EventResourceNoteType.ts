/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains the event resource's note information.
 * @export
 * @interface EventResourceNoteType
 */
export interface EventResourceNoteType {
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    creatorId?: string;
    /**
     * Indicates if the note is internal use only.
     * @type {boolean}
     * @memberof EventResourceNoteType
     */
    internal?: boolean;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    lastModifyDateTime?: string;
    /**
     * Contains note text.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    note?: string;
    /**
     * Note code.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    noteCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof EventResourceNoteType
     */
    noteId?: UniqueIDType;
    /**
     * Contains note title.
     * @type {string}
     * @memberof EventResourceNoteType
     */
    noteTitle?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof EventResourceNoteType
     */
    purgeDate?: string;
    /**
     * Contains display sequence.
     * @type {number}
     * @memberof EventResourceNoteType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the EventResourceNoteType interface.
 */
export function instanceOfEventResourceNoteType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventResourceNoteTypeFromJSON(json: any): EventResourceNoteType {
    return EventResourceNoteTypeFromJSONTyped(json, false);
}

export function EventResourceNoteTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventResourceNoteType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'noteCode': !exists(json, 'noteCode') ? undefined : json['noteCode'],
        'noteId': !exists(json, 'noteId') ? undefined : UniqueIDTypeFromJSON(json['noteId']),
        'noteTitle': !exists(json, 'noteTitle') ? undefined : json['noteTitle'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : json['purgeDate'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function EventResourceNoteTypeToJSON(value?: EventResourceNoteType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'internal': value.internal,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'note': value.note,
        'noteCode': value.noteCode,
        'noteId': UniqueIDTypeToJSON(value.noteId),
        'noteTitle': value.noteTitle,
        'purgeDate': value.purgeDate,
        'sequence': value.sequence,
    };
}

