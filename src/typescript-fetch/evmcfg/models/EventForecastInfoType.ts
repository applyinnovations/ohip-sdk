/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';

/**
 * Associated Information for an event forecast.
 * @export
 * @interface EventForecastInfoType
 */
export interface EventForecastInfoType {
    /**
     * Block type for which the forecast is associated.
     * @type {string}
     * @memberof EventForecastInfoType
     */
    blockType?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof EventForecastInfoType
     */
    dateRange?: DateRangeType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof EventForecastInfoType
     */
    eventType?: CodeDescriptionType;
    /**
     * Market code for which the forecast is associated.
     * @type {string}
     * @memberof EventForecastInfoType
     */
    marketCode?: string;
}

/**
 * Check if a given object implements the EventForecastInfoType interface.
 */
export function instanceOfEventForecastInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventForecastInfoTypeFromJSON(json: any): EventForecastInfoType {
    return EventForecastInfoTypeFromJSONTyped(json, false);
}

export function EventForecastInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventForecastInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockType': !exists(json, 'blockType') ? undefined : json['blockType'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'eventType': !exists(json, 'eventType') ? undefined : CodeDescriptionTypeFromJSON(json['eventType']),
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
    };
}

export function EventForecastInfoTypeToJSON(value?: EventForecastInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockType': value.blockType,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'eventType': CodeDescriptionTypeToJSON(value.eventType),
        'marketCode': value.marketCode,
    };
}

