/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringPackageEventListType } from './CateringPackageEventListType';
import {
    CateringPackageEventListTypeFromJSON,
    CateringPackageEventListTypeFromJSONTyped,
    CateringPackageEventListTypeToJSON,
} from './CateringPackageEventListType';
import type { CateringPackageInfoType } from './CateringPackageInfoType';
import {
    CateringPackageInfoTypeFromJSON,
    CateringPackageInfoTypeFromJSONTyped,
    CateringPackageInfoTypeToJSON,
} from './CateringPackageInfoType';
import type { CateringPackagePricingListType } from './CateringPackagePricingListType';
import {
    CateringPackagePricingListTypeFromJSON,
    CateringPackagePricingListTypeFromJSONTyped,
    CateringPackagePricingListTypeToJSON,
} from './CateringPackagePricingListType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for managing Catering Package.
 * @export
 * @interface CateringPackageType
 */
export interface CateringPackageType {
    /**
     * 
     * @type {CateringPackageEventListType}
     * @memberof CateringPackageType
     */
    eventsList?: CateringPackageEventListType;
    /**
     * Hotel Code associated with the Catering Package.
     * @type {string}
     * @memberof CateringPackageType
     */
    hotelId?: string;
    /**
     * 
     * @type {CateringPackageInfoType}
     * @memberof CateringPackageType
     */
    packageDetail?: CateringPackageInfoType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringPackageType
     */
    pkgId?: UniqueIDType;
    /**
     * 
     * @type {CateringPackagePricingListType}
     * @memberof CateringPackageType
     */
    pricingList?: CateringPackagePricingListType;
}

/**
 * Check if a given object implements the CateringPackageType interface.
 */
export function instanceOfCateringPackageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringPackageTypeFromJSON(json: any): CateringPackageType {
    return CateringPackageTypeFromJSONTyped(json, false);
}

export function CateringPackageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventsList': !exists(json, 'eventsList') ? undefined : CateringPackageEventListTypeFromJSON(json['eventsList']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'packageDetail': !exists(json, 'packageDetail') ? undefined : CateringPackageInfoTypeFromJSON(json['packageDetail']),
        'pkgId': !exists(json, 'pkgId') ? undefined : UniqueIDTypeFromJSON(json['pkgId']),
        'pricingList': !exists(json, 'pricingList') ? undefined : CateringPackagePricingListTypeFromJSON(json['pricingList']),
    };
}

export function CateringPackageTypeToJSON(value?: CateringPackageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventsList': CateringPackageEventListTypeToJSON(value.eventsList),
        'hotelId': value.hotelId,
        'packageDetail': CateringPackageInfoTypeToJSON(value.packageDetail),
        'pkgId': UniqueIDTypeToJSON(value.pkgId),
        'pricingList': CateringPackagePricingListTypeToJSON(value.pricingList),
    };
}

