/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType200 } from './TranslationTextType200';
import {
    TranslationTextType200FromJSON,
    TranslationTextType200FromJSONTyped,
    TranslationTextType200ToJSON,
} from './TranslationTextType200';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for Copying Catering Package Price.
 * @export
 * @interface CopyCateringPackagePriceType
 */
export interface CopyCateringPackagePriceType {
    /**
     * Code associated with the newly copied Catering Package Price.
     * @type {string}
     * @memberof CopyCateringPackagePriceType
     */
    code?: string;
    /**
     * 
     * @type {TranslationTextType200}
     * @memberof CopyCateringPackagePriceType
     */
    translatableDescription?: TranslationTextType200;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CopyCateringPackagePriceType
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CopyCateringPackagePriceType interface.
 */
export function instanceOfCopyCateringPackagePriceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyCateringPackagePriceTypeFromJSON(json: any): CopyCateringPackagePriceType {
    return CopyCateringPackagePriceTypeFromJSONTyped(json, false);
}

export function CopyCateringPackagePriceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyCateringPackagePriceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'translatableDescription': !exists(json, 'translatableDescription') ? undefined : TranslationTextType200FromJSON(json['translatableDescription']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CopyCateringPackagePriceTypeToJSON(value?: CopyCateringPackagePriceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'translatableDescription': TranslationTextType200ToJSON(value.translatableDescription),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

