/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Base structure for template and hotel Event Code.
 * @export
 * @interface TemplateEventCodeType
 */
export interface TemplateEventCodeType {
    /**
     * Code of an Event.
     * @type {string}
     * @memberof TemplateEventCodeType
     */
    code?: string;
    /**
     * Description of an Event.
     * @type {string}
     * @memberof TemplateEventCodeType
     */
    description?: string;
    /**
     * Black Out flag of Event.
     * @type {boolean}
     * @memberof TemplateEventCodeType
     */
    blackOut?: boolean;
    /**
     * Sell sequence of Event.
     * @type {number}
     * @memberof TemplateEventCodeType
     */
    sellSequence?: number;
    /**
     * Inactive flag of Event.
     * @type {boolean}
     * @memberof TemplateEventCodeType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the TemplateEventCodeType interface.
 */
export function instanceOfTemplateEventCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateEventCodeTypeFromJSON(json: any): TemplateEventCodeType {
    return TemplateEventCodeTypeFromJSONTyped(json, false);
}

export function TemplateEventCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateEventCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'blackOut': !exists(json, 'blackOut') ? undefined : json['blackOut'],
        'sellSequence': !exists(json, 'sellSequence') ? undefined : json['sellSequence'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function TemplateEventCodeTypeToJSON(value?: TemplateEventCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'blackOut': value.blackOut,
        'sellSequence': value.sellSequence,
        'inactive': value.inactive,
    };
}

