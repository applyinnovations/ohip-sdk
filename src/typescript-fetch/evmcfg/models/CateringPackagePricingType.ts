/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringPackageRevenueListType } from './CateringPackageRevenueListType';
import {
    CateringPackageRevenueListTypeFromJSON,
    CateringPackageRevenueListTypeFromJSONTyped,
    CateringPackageRevenueListTypeToJSON,
} from './CateringPackageRevenueListType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for managing Pricing Details associated with a particular Catering Package.
 * @export
 * @interface CateringPackagePricingType
 */
export interface CateringPackagePricingType {
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof CateringPackagePricingType
     */
    blockDate?: DateTimeSpanType;
    /**
     * Collection of configured Booking Types for the package property.
     * @type {string}
     * @memberof CateringPackagePricingType
     */
    bookingType?: string;
    /**
     * Title of the Catering Package Event Note.
     * @type {string}
     * @memberof CateringPackagePricingType
     */
    description?: string;
    /**
     * Defines if Flat Rate is applicable.
     * @type {boolean}
     * @memberof CateringPackagePricingType
     */
    flatRate?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringPackagePricingType
     */
    id?: UniqueIDType;
    /**
     * Market Code associated with the Price Details.
     * @type {string}
     * @memberof CateringPackagePricingType
     */
    marketCode?: string;
    /**
     * Maximum Attendees.
     * @type {number}
     * @memberof CateringPackagePricingType
     */
    maxAttendees?: number;
    /**
     * Minimum Attendees.
     * @type {number}
     * @memberof CateringPackagePricingType
     */
    minAttendees?: number;
    /**
     * Price Code.
     * @type {string}
     * @memberof CateringPackagePricingType
     */
    priceCode?: string;
    /**
     * 
     * @type {CateringPackageRevenueListType}
     * @memberof CateringPackagePricingType
     */
    revenueDetails?: CateringPackageRevenueListType;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof CateringPackagePricingType
     */
    sellDate?: DateTimeSpanType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringPackagePricingType
     */
    totalPrice?: CurrencyAmountType;
    /**
     * Defines if web booking is allowed.
     * @type {boolean}
     * @memberof CateringPackagePricingType
     */
    webBookable?: boolean;
}

/**
 * Check if a given object implements the CateringPackagePricingType interface.
 */
export function instanceOfCateringPackagePricingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringPackagePricingTypeFromJSON(json: any): CateringPackagePricingType {
    return CateringPackagePricingTypeFromJSONTyped(json, false);
}

export function CateringPackagePricingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackagePricingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockDate': !exists(json, 'blockDate') ? undefined : DateTimeSpanTypeFromJSON(json['blockDate']),
        'bookingType': !exists(json, 'bookingType') ? undefined : json['bookingType'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'flatRate': !exists(json, 'flatRate') ? undefined : json['flatRate'],
        'id': !exists(json, 'id') ? undefined : UniqueIDTypeFromJSON(json['id']),
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'maxAttendees': !exists(json, 'maxAttendees') ? undefined : json['maxAttendees'],
        'minAttendees': !exists(json, 'minAttendees') ? undefined : json['minAttendees'],
        'priceCode': !exists(json, 'priceCode') ? undefined : json['priceCode'],
        'revenueDetails': !exists(json, 'revenueDetails') ? undefined : CateringPackageRevenueListTypeFromJSON(json['revenueDetails']),
        'sellDate': !exists(json, 'sellDate') ? undefined : DateTimeSpanTypeFromJSON(json['sellDate']),
        'totalPrice': !exists(json, 'totalPrice') ? undefined : CurrencyAmountTypeFromJSON(json['totalPrice']),
        'webBookable': !exists(json, 'webBookable') ? undefined : json['webBookable'],
    };
}

export function CateringPackagePricingTypeToJSON(value?: CateringPackagePricingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockDate': DateTimeSpanTypeToJSON(value.blockDate),
        'bookingType': value.bookingType,
        'description': value.description,
        'flatRate': value.flatRate,
        'id': UniqueIDTypeToJSON(value.id),
        'marketCode': value.marketCode,
        'maxAttendees': value.maxAttendees,
        'minAttendees': value.minAttendees,
        'priceCode': value.priceCode,
        'revenueDetails': CateringPackageRevenueListTypeToJSON(value.revenueDetails),
        'sellDate': DateTimeSpanTypeToJSON(value.sellDate),
        'totalPrice': CurrencyAmountTypeToJSON(value.totalPrice),
        'webBookable': value.webBookable,
    };
}

