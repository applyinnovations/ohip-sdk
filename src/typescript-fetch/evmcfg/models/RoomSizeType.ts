/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Detailed information on the capacity of a room.
 * @export
 * @interface RoomSizeType
 */
export interface RoomSizeType {
    /**
     * Width of the room.
     * @type {number}
     * @memberof RoomSizeType
     */
    width?: number;
    /**
     * Length of the room.
     * @type {number}
     * @memberof RoomSizeType
     */
    length?: number;
    /**
     * Area of the room.
     * @type {number}
     * @memberof RoomSizeType
     */
    area?: number;
    /**
     * Minimum height of the room.
     * @type {number}
     * @memberof RoomSizeType
     */
    minHeight?: number;
    /**
     * Maximum height of the room.
     * @type {number}
     * @memberof RoomSizeType
     */
    maxHeight?: number;
    /**
     * The unit of measure in a code format.
     * @type {string}
     * @memberof RoomSizeType
     */
    unitOfMeasureCode?: string;
}

/**
 * Check if a given object implements the RoomSizeType interface.
 */
export function instanceOfRoomSizeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomSizeTypeFromJSON(json: any): RoomSizeType {
    return RoomSizeTypeFromJSONTyped(json, false);
}

export function RoomSizeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomSizeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'width': !exists(json, 'width') ? undefined : json['width'],
        'length': !exists(json, 'length') ? undefined : json['length'],
        'area': !exists(json, 'area') ? undefined : json['area'],
        'minHeight': !exists(json, 'minHeight') ? undefined : json['minHeight'],
        'maxHeight': !exists(json, 'maxHeight') ? undefined : json['maxHeight'],
        'unitOfMeasureCode': !exists(json, 'unitOfMeasureCode') ? undefined : json['unitOfMeasureCode'],
    };
}

export function RoomSizeTypeToJSON(value?: RoomSizeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'width': value.width,
        'length': value.length,
        'area': value.area,
        'minHeight': value.minHeight,
        'maxHeight': value.maxHeight,
        'unitOfMeasureCode': value.unitOfMeasureCode,
    };
}

