/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FunctionSpaceRoomType } from './FunctionSpaceRoomType';
import {
    FunctionSpaceRoomTypeFromJSON,
    FunctionSpaceRoomTypeFromJSONTyped,
    FunctionSpaceRoomTypeToJSON,
} from './FunctionSpaceRoomType';

/**
 * This type holds collection of function space room with complete information.
 * @export
 * @interface FunctionSpaceType
 */
export interface FunctionSpaceType {
    /**
     * 
     * @type {Array<FunctionSpaceRoomType>}
     * @memberof FunctionSpaceType
     */
    room?: Array<FunctionSpaceRoomType>;
    /**
     * Hotel Code of the room.
     * @type {string}
     * @memberof FunctionSpaceType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the FunctionSpaceType interface.
 */
export function instanceOfFunctionSpaceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FunctionSpaceTypeFromJSON(json: any): FunctionSpaceType {
    return FunctionSpaceTypeFromJSONTyped(json, false);
}

export function FunctionSpaceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionSpaceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'room': !exists(json, 'room') ? undefined : ((json['room'] as Array<any>).map(FunctionSpaceRoomTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function FunctionSpaceTypeToJSON(value?: FunctionSpaceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'room': value.room === undefined ? undefined : ((value.room as Array<any>).map(FunctionSpaceRoomTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

