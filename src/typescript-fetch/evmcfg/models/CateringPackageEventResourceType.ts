/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringPackageResourceNoteType } from './CateringPackageResourceNoteType';
import {
    CateringPackageResourceNoteTypeFromJSON,
    CateringPackageResourceNoteTypeFromJSONTyped,
    CateringPackageResourceNoteTypeToJSON,
} from './CateringPackageResourceNoteType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { EventResourceType } from './EventResourceType';
import {
    EventResourceTypeFromJSON,
    EventResourceTypeFromJSONTyped,
    EventResourceTypeToJSON,
} from './EventResourceType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for managing Resources associated with a particular Catering Package Event.
 * @export
 * @interface CateringPackageEventResourceType
 */
export interface CateringPackageEventResourceType {
    /**
     * Unique Identifier for a Resource associated with a particular Catering Package Event.
     * @type {string}
     * @memberof CateringPackageEventResourceType
     */
    resourceId?: string;
    /**
     * 
     * @type {EventResourceType}
     * @memberof CateringPackageEventResourceType
     */
    type?: EventResourceType;
    /**
     * Name of the Resource.
     * @type {string}
     * @memberof CateringPackageEventResourceType
     */
    name?: string;
    /**
     * Setup code of th Function Space.
     * @type {string}
     * @memberof CateringPackageEventResourceType
     */
    roomSetup?: string;
    /**
     * RateCode associated with the Function Space.
     * @type {string}
     * @memberof CateringPackageEventResourceType
     */
    roomRate?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CateringPackageEventResourceType
     */
    revenueTypes?: Array<string>;
    /**
     * Defines if the Function Space is shareable.
     * @type {boolean}
     * @memberof CateringPackageEventResourceType
     */
    isShareable?: boolean;
    /**
     * Defines the quantity of the Item.
     * @type {number}
     * @memberof CateringPackageEventResourceType
     */
    quantity?: number;
    /**
     * Defines the Display Order of the Item or Pickup Sequence during the booking process for a Function Space.
     * @type {number}
     * @memberof CateringPackageEventResourceType
     */
    orderBy?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringPackageEventResourceType
     */
    itemAttribute?: UniqueIDType;
    /**
     * Rate Code associated with the Item.
     * @type {string}
     * @memberof CateringPackageEventResourceType
     */
    itemRate?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringPackageEventResourceType
     */
    price?: CurrencyAmountType;
    /**
     * Collection of multiple Resource Notes associated with a particular Catering Package Resource.
     * @type {Array<CateringPackageResourceNoteType>}
     * @memberof CateringPackageEventResourceType
     */
    resourceNotes?: Array<CateringPackageResourceNoteType>;
}

/**
 * Check if a given object implements the CateringPackageEventResourceType interface.
 */
export function instanceOfCateringPackageEventResourceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringPackageEventResourceTypeFromJSON(json: any): CateringPackageEventResourceType {
    return CateringPackageEventResourceTypeFromJSONTyped(json, false);
}

export function CateringPackageEventResourceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackageEventResourceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resourceId': !exists(json, 'resourceId') ? undefined : json['resourceId'],
        'type': !exists(json, 'type') ? undefined : EventResourceTypeFromJSON(json['type']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'roomSetup': !exists(json, 'roomSetup') ? undefined : json['roomSetup'],
        'roomRate': !exists(json, 'roomRate') ? undefined : json['roomRate'],
        'revenueTypes': !exists(json, 'revenueTypes') ? undefined : json['revenueTypes'],
        'isShareable': !exists(json, 'isShareable') ? undefined : json['isShareable'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
        'itemAttribute': !exists(json, 'itemAttribute') ? undefined : UniqueIDTypeFromJSON(json['itemAttribute']),
        'itemRate': !exists(json, 'itemRate') ? undefined : json['itemRate'],
        'price': !exists(json, 'price') ? undefined : CurrencyAmountTypeFromJSON(json['price']),
        'resourceNotes': !exists(json, 'resourceNotes') ? undefined : ((json['resourceNotes'] as Array<any>).map(CateringPackageResourceNoteTypeFromJSON)),
    };
}

export function CateringPackageEventResourceTypeToJSON(value?: CateringPackageEventResourceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resourceId': value.resourceId,
        'type': EventResourceTypeToJSON(value.type),
        'name': value.name,
        'roomSetup': value.roomSetup,
        'roomRate': value.roomRate,
        'revenueTypes': value.revenueTypes,
        'isShareable': value.isShareable,
        'quantity': value.quantity,
        'orderBy': value.orderBy,
        'itemAttribute': UniqueIDTypeToJSON(value.itemAttribute),
        'itemRate': value.itemRate,
        'price': CurrencyAmountTypeToJSON(value.price),
        'resourceNotes': value.resourceNotes === undefined ? undefined : ((value.resourceNotes as Array<any>).map(CateringPackageResourceNoteTypeToJSON)),
    };
}

