/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RevenueTypeDetailType } from './RevenueTypeDetailType';
import {
    RevenueTypeDetailTypeFromJSON,
    RevenueTypeDetailTypeFromJSONTyped,
    RevenueTypeDetailTypeToJSON,
} from './RevenueTypeDetailType';
import type { TranslationTextType200 } from './TranslationTextType200';
import {
    TranslationTextType200FromJSON,
    TranslationTextType200FromJSONTyped,
    TranslationTextType200ToJSON,
} from './TranslationTextType200';

/**
 * Base type provides information about Catering Revenue Types Configuration.
 * @export
 * @interface RevenueTypeType
 */
export interface RevenueTypeType {
    /**
     * Code is used to identify a Catering Revenue Type/Code.
     * @type {string}
     * @memberof RevenueTypeType
     */
    code?: string;
    /**
     * Revenue Types display sequence Number
     * @type {number}
     * @memberof RevenueTypeType
     */
    displaySequence?: number;
    /**
     * Flag for Food and Beverages.
     * @type {boolean}
     * @memberof RevenueTypeType
     */
    foodAndBeverage?: boolean;
    /**
     * Indicates if the Revenue type Code is inactive.
     * @type {boolean}
     * @memberof RevenueTypeType
     */
    inactive?: boolean;
    /**
     * List of Revenue details assoicated to a Revenue Type (Additional Details)
     * @type {Array<RevenueTypeDetailType>}
     * @memberof RevenueTypeType
     */
    revenueDetails?: Array<RevenueTypeDetailType>;
    /**
     * Revenue Group
     * @type {string}
     * @memberof RevenueTypeType
     */
    revenueGroup?: string;
    /**
     * 
     * @type {TranslationTextType200}
     * @memberof RevenueTypeType
     */
    translatableDescription?: TranslationTextType200;
}

/**
 * Check if a given object implements the RevenueTypeType interface.
 */
export function instanceOfRevenueTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RevenueTypeTypeFromJSON(json: any): RevenueTypeType {
    return RevenueTypeTypeFromJSONTyped(json, false);
}

export function RevenueTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'foodAndBeverage': !exists(json, 'foodAndBeverage') ? undefined : json['foodAndBeverage'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'revenueDetails': !exists(json, 'revenueDetails') ? undefined : ((json['revenueDetails'] as Array<any>).map(RevenueTypeDetailTypeFromJSON)),
        'revenueGroup': !exists(json, 'revenueGroup') ? undefined : json['revenueGroup'],
        'translatableDescription': !exists(json, 'translatableDescription') ? undefined : TranslationTextType200FromJSON(json['translatableDescription']),
    };
}

export function RevenueTypeTypeToJSON(value?: RevenueTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'displaySequence': value.displaySequence,
        'foodAndBeverage': value.foodAndBeverage,
        'inactive': value.inactive,
        'revenueDetails': value.revenueDetails === undefined ? undefined : ((value.revenueDetails as Array<any>).map(RevenueTypeDetailTypeToJSON)),
        'revenueGroup': value.revenueGroup,
        'translatableDescription': TranslationTextType200ToJSON(value.translatableDescription),
    };
}

