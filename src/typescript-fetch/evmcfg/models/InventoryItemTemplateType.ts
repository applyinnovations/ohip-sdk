/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryItemTemplateItemType } from './InventoryItemTemplateItemType';
import {
    InventoryItemTemplateItemTypeFromJSON,
    InventoryItemTemplateItemTypeFromJSONTyped,
    InventoryItemTemplateItemTypeToJSON,
} from './InventoryItemTemplateItemType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * This gives detailed information about an inventory item template.
 * @export
 * @interface InventoryItemTemplateType
 */
export interface InventoryItemTemplateType {
    /**
     * Specifies the hotel code for which the inventory item template is defined.
     * @type {string}
     * @memberof InventoryItemTemplateType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof InventoryItemTemplateType
     */
    inventoryItemTemplateId?: UniqueIDType;
    /**
     * This type holds a collection of inventory items which are to be grouped under a single inventory item template.
     * @type {Array<InventoryItemTemplateItemType>}
     * @memberof InventoryItemTemplateType
     */
    inventoryItemTemplateItems?: Array<InventoryItemTemplateItemType>;
    /**
     * Specifies the name of the inventory item template.
     * @type {string}
     * @memberof InventoryItemTemplateType
     */
    inventoryItemTemplateName?: string;
}

/**
 * Check if a given object implements the InventoryItemTemplateType interface.
 */
export function instanceOfInventoryItemTemplateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryItemTemplateTypeFromJSON(json: any): InventoryItemTemplateType {
    return InventoryItemTemplateTypeFromJSONTyped(json, false);
}

export function InventoryItemTemplateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryItemTemplateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inventoryItemTemplateId': !exists(json, 'inventoryItemTemplateId') ? undefined : UniqueIDTypeFromJSON(json['inventoryItemTemplateId']),
        'inventoryItemTemplateItems': !exists(json, 'inventoryItemTemplateItems') ? undefined : ((json['inventoryItemTemplateItems'] as Array<any>).map(InventoryItemTemplateItemTypeFromJSON)),
        'inventoryItemTemplateName': !exists(json, 'inventoryItemTemplateName') ? undefined : json['inventoryItemTemplateName'],
    };
}

export function InventoryItemTemplateTypeToJSON(value?: InventoryItemTemplateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'inventoryItemTemplateId': UniqueIDTypeToJSON(value.inventoryItemTemplateId),
        'inventoryItemTemplateItems': value.inventoryItemTemplateItems === undefined ? undefined : ((value.inventoryItemTemplateItems as Array<any>).map(InventoryItemTemplateItemTypeToJSON)),
        'inventoryItemTemplateName': value.inventoryItemTemplateName,
    };
}

