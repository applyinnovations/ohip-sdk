/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringPackageEventNoteType } from './CateringPackageEventNoteType';
import {
    CateringPackageEventNoteTypeFromJSON,
    CateringPackageEventNoteTypeFromJSONTyped,
    CateringPackageEventNoteTypeToJSON,
} from './CateringPackageEventNoteType';
import type { CateringPackageEventResourceType } from './CateringPackageEventResourceType';
import {
    CateringPackageEventResourceTypeFromJSON,
    CateringPackageEventResourceTypeFromJSONTyped,
    CateringPackageEventResourceTypeToJSON,
} from './CateringPackageEventResourceType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for managing Events associated with a particular Catering Package.
 * @export
 * @interface CateringPackageEventType
 */
export interface CateringPackageEventType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringPackageEventType
     */
    id?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringPackageEventType
     */
    masterEventId?: UniqueIDType;
    /**
     * Event Type associated with the Catering Package Event.
     * @type {string}
     * @memberof CateringPackageEventType
     */
    eventType?: string;
    /**
     * Event Name for the Catering Package Event.
     * @type {string}
     * @memberof CateringPackageEventType
     */
    eventName?: string;
    /**
     * Event Day for the Catering Package Event.
     * @type {number}
     * @memberof CateringPackageEventType
     */
    dayOrder?: number;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof CateringPackageEventType
     */
    eventTime?: DateTimeSpanType;
    /**
     * Room details for the Catering Package Event.
     * @type {string}
     * @memberof CateringPackageEventType
     */
    room?: string;
    /**
     * Room Setup details for the Catering Package Event.
     * @type {string}
     * @memberof CateringPackageEventType
     */
    roomSetup?: string;
    /**
     * Stores the selected rate code for the meeting room.
     * @type {string}
     * @memberof CateringPackageEventType
     */
    roomRateCode?: string;
    /**
     * Indiciates if this package event has sub-events.
     * @type {boolean}
     * @memberof CateringPackageEventType
     */
    isMaster?: boolean;
    /**
     * Indicates if the function space should be booked as sharable.
     * @type {boolean}
     * @memberof CateringPackageEventType
     */
    isShareable?: boolean;
    /**
     * Indicates if the function space requires an alternate space.
     * @type {boolean}
     * @memberof CateringPackageEventType
     */
    alternate?: boolean;
    /**
     * Indicates if the package event is a sub-event or not.
     * @type {boolean}
     * @memberof CateringPackageEventType
     */
    sub?: boolean;
    /**
     * Collection of multiple Event Notes associated with a particular Catering Package Event.
     * @type {Array<CateringPackageEventNoteType>}
     * @memberof CateringPackageEventType
     */
    notes?: Array<CateringPackageEventNoteType>;
    /**
     * Collection of multiple Resources associated with a particular Catering Package Event.
     * @type {Array<CateringPackageEventResourceType>}
     * @memberof CateringPackageEventType
     */
    resources?: Array<CateringPackageEventResourceType>;
}

/**
 * Check if a given object implements the CateringPackageEventType interface.
 */
export function instanceOfCateringPackageEventType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringPackageEventTypeFromJSON(json: any): CateringPackageEventType {
    return CateringPackageEventTypeFromJSONTyped(json, false);
}

export function CateringPackageEventTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackageEventType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : UniqueIDTypeFromJSON(json['id']),
        'masterEventId': !exists(json, 'masterEventId') ? undefined : UniqueIDTypeFromJSON(json['masterEventId']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'dayOrder': !exists(json, 'dayOrder') ? undefined : json['dayOrder'],
        'eventTime': !exists(json, 'eventTime') ? undefined : DateTimeSpanTypeFromJSON(json['eventTime']),
        'room': !exists(json, 'room') ? undefined : json['room'],
        'roomSetup': !exists(json, 'roomSetup') ? undefined : json['roomSetup'],
        'roomRateCode': !exists(json, 'roomRateCode') ? undefined : json['roomRateCode'],
        'isMaster': !exists(json, 'isMaster') ? undefined : json['isMaster'],
        'isShareable': !exists(json, 'isShareable') ? undefined : json['isShareable'],
        'alternate': !exists(json, 'alternate') ? undefined : json['alternate'],
        'sub': !exists(json, 'sub') ? undefined : json['sub'],
        'notes': !exists(json, 'notes') ? undefined : ((json['notes'] as Array<any>).map(CateringPackageEventNoteTypeFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : ((json['resources'] as Array<any>).map(CateringPackageEventResourceTypeFromJSON)),
    };
}

export function CateringPackageEventTypeToJSON(value?: CateringPackageEventType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': UniqueIDTypeToJSON(value.id),
        'masterEventId': UniqueIDTypeToJSON(value.masterEventId),
        'eventType': value.eventType,
        'eventName': value.eventName,
        'dayOrder': value.dayOrder,
        'eventTime': DateTimeSpanTypeToJSON(value.eventTime),
        'room': value.room,
        'roomSetup': value.roomSetup,
        'roomRateCode': value.roomRateCode,
        'isMaster': value.isMaster,
        'isShareable': value.isShareable,
        'alternate': value.alternate,
        'sub': value.sub,
        'notes': value.notes === undefined ? undefined : ((value.notes as Array<any>).map(CateringPackageEventNoteTypeToJSON)),
        'resources': value.resources === undefined ? undefined : ((value.resources as Array<any>).map(CateringPackageEventResourceTypeToJSON)),
    };
}

