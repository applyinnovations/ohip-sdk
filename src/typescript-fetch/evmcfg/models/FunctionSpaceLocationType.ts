/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * Function Space Location details.
 * @export
 * @interface FunctionSpaceLocationType
 */
export interface FunctionSpaceLocationType {
    /**
     * Function Space Location Code.
     * @type {string}
     * @memberof FunctionSpaceLocationType
     */
    code?: string;
    /**
     * Hotel code that the function space location belongs to.
     * @type {string}
     * @memberof FunctionSpaceLocationType
     */
    hotelId?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof FunctionSpaceLocationType
     */
    translatableDescription?: TranslationTextType2000;
}

/**
 * Check if a given object implements the FunctionSpaceLocationType interface.
 */
export function instanceOfFunctionSpaceLocationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FunctionSpaceLocationTypeFromJSON(json: any): FunctionSpaceLocationType {
    return FunctionSpaceLocationTypeFromJSONTyped(json, false);
}

export function FunctionSpaceLocationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionSpaceLocationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'translatableDescription': !exists(json, 'translatableDescription') ? undefined : TranslationTextType2000FromJSON(json['translatableDescription']),
    };
}

export function FunctionSpaceLocationTypeToJSON(value?: FunctionSpaceLocationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'hotelId': value.hotelId,
        'translatableDescription': TranslationTextType2000ToJSON(value.translatableDescription),
    };
}

