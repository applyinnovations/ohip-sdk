/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RatePlanRatingType } from './RatePlanRatingType';
import {
    RatePlanRatingTypeFromJSON,
    RatePlanRatingTypeFromJSONTyped,
    RatePlanRatingTypeToJSON,
} from './RatePlanRatingType';
import type { RoomCapacityType } from './RoomCapacityType';
import {
    RoomCapacityTypeFromJSON,
    RoomCapacityTypeFromJSONTyped,
    RoomCapacityTypeToJSON,
} from './RoomCapacityType';
import type { RoomFeatureType } from './RoomFeatureType';
import {
    RoomFeatureTypeFromJSON,
    RoomFeatureTypeFromJSONTyped,
    RoomFeatureTypeToJSON,
} from './RoomFeatureType';
import type { RoomSizeType } from './RoomSizeType';
import {
    RoomSizeTypeFromJSON,
    RoomSizeTypeFromJSONTyped,
    RoomSizeTypeToJSON,
} from './RoomSizeType';
import type { RoomTypeShortInfoType } from './RoomTypeShortInfoType';
import {
    RoomTypeShortInfoTypeFromJSON,
    RoomTypeShortInfoTypeFromJSONTyped,
    RoomTypeShortInfoTypeToJSON,
} from './RoomTypeShortInfoType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * This type represents the primary room attributes.
 * @export
 * @interface FunctionSpaceRoomType
 */
export interface FunctionSpaceRoomType {
    /**
     * 
     * @type {RoomTypeShortInfoType}
     * @memberof FunctionSpaceRoomType
     */
    roomType?: RoomTypeShortInfoType;
    /**
     * Floor of the Room.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    floor?: string;
    /**
     * Description for the Floor of the Room.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    floorDescription?: string;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof FunctionSpaceRoomType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Detail Long Description Of The Room.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    roomDescription?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof FunctionSpaceRoomType
     */
    description?: TranslationTextType2000;
    /**
     * This indicates room smoking preference.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    smokingPreference?: string;
    /**
     * This indicates the description of the room smoking preference.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    smokingPreferenceDescription?: string;
    /**
     * Building associated with the room.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    building?: string;
    /**
     * 
     * @type {RatePlanRatingType}
     * @memberof FunctionSpaceRoomType
     */
    roomAssignmentRating?: RatePlanRatingType;
    /**
     * Indicates whether the room is accessibility compliant.
     * @type {boolean}
     * @memberof FunctionSpaceRoomType
     */
    accessible?: boolean;
    /**
     * Code of the room.
     * @type {string}
     * @memberof FunctionSpaceRoomType
     */
    roomId?: string;
    /**
     * Indicates whether the room is a Meeting Room
     * @type {boolean}
     * @memberof FunctionSpaceRoomType
     */
    meetingRoom?: boolean;
    /**
     * 
     * @type {RoomCapacityType}
     * @memberof FunctionSpaceRoomType
     */
    roomCapacity?: RoomCapacityType;
    /**
     * Collection of room size information of of the function space group by unit of measurement.
     * @type {Array<RoomSizeType>}
     * @memberof FunctionSpaceRoomType
     */
    roomSize?: Array<RoomSizeType>;
}

/**
 * Check if a given object implements the FunctionSpaceRoomType interface.
 */
export function instanceOfFunctionSpaceRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FunctionSpaceRoomTypeFromJSON(json: any): FunctionSpaceRoomType {
    return FunctionSpaceRoomTypeFromJSONTyped(json, false);
}

export function FunctionSpaceRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionSpaceRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomType': !exists(json, 'roomType') ? undefined : RoomTypeShortInfoTypeFromJSON(json['roomType']),
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'floorDescription': !exists(json, 'floorDescription') ? undefined : json['floorDescription'],
        'roomFeatures': !exists(json, 'roomFeatures') ? undefined : ((json['roomFeatures'] as Array<any>).map(RoomFeatureTypeFromJSON)),
        'roomDescription': !exists(json, 'roomDescription') ? undefined : json['roomDescription'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'smokingPreference': !exists(json, 'smokingPreference') ? undefined : json['smokingPreference'],
        'smokingPreferenceDescription': !exists(json, 'smokingPreferenceDescription') ? undefined : json['smokingPreferenceDescription'],
        'building': !exists(json, 'building') ? undefined : json['building'],
        'roomAssignmentRating': !exists(json, 'roomAssignmentRating') ? undefined : RatePlanRatingTypeFromJSON(json['roomAssignmentRating']),
        'accessible': !exists(json, 'accessible') ? undefined : json['accessible'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'meetingRoom': !exists(json, 'meetingRoom') ? undefined : json['meetingRoom'],
        'roomCapacity': !exists(json, 'roomCapacity') ? undefined : RoomCapacityTypeFromJSON(json['roomCapacity']),
        'roomSize': !exists(json, 'roomSize') ? undefined : ((json['roomSize'] as Array<any>).map(RoomSizeTypeFromJSON)),
    };
}

export function FunctionSpaceRoomTypeToJSON(value?: FunctionSpaceRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomType': RoomTypeShortInfoTypeToJSON(value.roomType),
        'floor': value.floor,
        'floorDescription': value.floorDescription,
        'roomFeatures': value.roomFeatures === undefined ? undefined : ((value.roomFeatures as Array<any>).map(RoomFeatureTypeToJSON)),
        'roomDescription': value.roomDescription,
        'description': TranslationTextType2000ToJSON(value.description),
        'smokingPreference': value.smokingPreference,
        'smokingPreferenceDescription': value.smokingPreferenceDescription,
        'building': value.building,
        'roomAssignmentRating': RatePlanRatingTypeToJSON(value.roomAssignmentRating),
        'accessible': value.accessible,
        'roomId': value.roomId,
        'meetingRoom': value.meetingRoom,
        'roomCapacity': RoomCapacityTypeToJSON(value.roomCapacity),
        'roomSize': value.roomSize === undefined ? undefined : ((value.roomSize as Array<any>).map(RoomSizeTypeToJSON)),
    };
}

