/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ARAccountCriteriaType } from './ARAccountCriteriaType';
import {
    ARAccountCriteriaTypeFromJSON,
    ARAccountCriteriaTypeFromJSONTyped,
    ARAccountCriteriaTypeToJSON,
} from './ARAccountCriteriaType';
import type { ARApplyType } from './ARApplyType';
import {
    ARApplyTypeFromJSON,
    ARApplyTypeFromJSONTyped,
    ARApplyTypeToJSON,
} from './ARApplyType';
import type { ARPaymentInvoicesTypeInner } from './ARPaymentInvoicesTypeInner';
import {
    ARPaymentInvoicesTypeInnerFromJSON,
    ARPaymentInvoicesTypeInnerFromJSONTyped,
    ARPaymentInvoicesTypeInnerToJSON,
} from './ARPaymentInvoicesTypeInner';
import type { ARPaymentType } from './ARPaymentType';
import {
    ARPaymentTypeFromJSON,
    ARPaymentTypeFromJSONTyped,
    ARPaymentTypeToJSON,
} from './ARPaymentType';

/**
 * Criteria type for apply credits to Invoices. Requires a list of invoices to apply the credit.
 * @export
 * @interface ARApplyPaymentCriteriaType
 */
export interface ARApplyPaymentCriteriaType {
    /**
     * 
     * @type {ARAccountCriteriaType}
     * @memberof ARApplyPaymentCriteriaType
     */
    account?: ARAccountCriteriaType;
    /**
     * 
     * @type {ARApplyType}
     * @memberof ARApplyPaymentCriteriaType
     */
    applyType?: ARApplyType;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ARApplyPaymentCriteriaType
     */
    cashierId?: number;
    /**
     * AR Invoice to which the payment will be applied.
     * @type {Array<ARPaymentInvoicesTypeInner>}
     * @memberof ARApplyPaymentCriteriaType
     */
    invoices?: Array<ARPaymentInvoicesTypeInner>;
    /**
     * A collection of AR Payments.
     * @type {Array<ARPaymentType>}
     * @memberof ARApplyPaymentCriteriaType
     */
    payments?: Array<ARPaymentType>;
}

/**
 * Check if a given object implements the ARApplyPaymentCriteriaType interface.
 */
export function instanceOfARApplyPaymentCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARApplyPaymentCriteriaTypeFromJSON(json: any): ARApplyPaymentCriteriaType {
    return ARApplyPaymentCriteriaTypeFromJSONTyped(json, false);
}

export function ARApplyPaymentCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARApplyPaymentCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account': !exists(json, 'account') ? undefined : ARAccountCriteriaTypeFromJSON(json['account']),
        'applyType': !exists(json, 'applyType') ? undefined : ARApplyTypeFromJSON(json['applyType']),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'invoices': !exists(json, 'invoices') ? undefined : ((json['invoices'] as Array<any>).map(ARPaymentInvoicesTypeInnerFromJSON)),
        'payments': !exists(json, 'payments') ? undefined : ((json['payments'] as Array<any>).map(ARPaymentTypeFromJSON)),
    };
}

export function ARApplyPaymentCriteriaTypeToJSON(value?: ARApplyPaymentCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account': ARAccountCriteriaTypeToJSON(value.account),
        'applyType': ARApplyTypeToJSON(value.applyType),
        'cashierId': value.cashierId,
        'invoices': value.invoices === undefined ? undefined : ((value.invoices as Array<any>).map(ARPaymentInvoicesTypeInnerToJSON)),
        'payments': value.payments === undefined ? undefined : ((value.payments as Array<any>).map(ARPaymentTypeToJSON)),
    };
}

