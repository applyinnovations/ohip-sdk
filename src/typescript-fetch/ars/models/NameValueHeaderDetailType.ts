/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NameValueBaseSearchType } from './NameValueBaseSearchType';
import {
    NameValueBaseSearchTypeFromJSON,
    NameValueBaseSearchTypeFromJSONTyped,
    NameValueBaseSearchTypeToJSON,
} from './NameValueBaseSearchType';
import type { NameValueDetailType } from './NameValueDetailType';
import {
    NameValueDetailTypeFromJSON,
    NameValueDetailTypeFromJSONTyped,
    NameValueDetailTypeToJSON,
} from './NameValueDetailType';

/**
 * Name value details collected before Folio Settlement
 * @export
 * @interface NameValueHeaderDetailType
 */
export interface NameValueHeaderDetailType {
    /**
     * 
     * @type {NameValueBaseSearchType}
     * @memberof NameValueHeaderDetailType
     */
    nameValueHeader?: NameValueBaseSearchType;
    /**
     * 
     * @type {NameValueDetailType}
     * @memberof NameValueHeaderDetailType
     */
    nameValueDetails?: NameValueDetailType;
}

/**
 * Check if a given object implements the NameValueHeaderDetailType interface.
 */
export function instanceOfNameValueHeaderDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NameValueHeaderDetailTypeFromJSON(json: any): NameValueHeaderDetailType {
    return NameValueHeaderDetailTypeFromJSONTyped(json, false);
}

export function NameValueHeaderDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NameValueHeaderDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nameValueHeader': !exists(json, 'nameValueHeader') ? undefined : NameValueBaseSearchTypeFromJSON(json['nameValueHeader']),
        'nameValueDetails': !exists(json, 'nameValueDetails') ? undefined : NameValueDetailTypeFromJSON(json['nameValueDetails']),
    };
}

export function NameValueHeaderDetailTypeToJSON(value?: NameValueHeaderDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nameValueHeader': NameValueBaseSearchTypeToJSON(value.nameValueHeader),
        'nameValueDetails': NameValueDetailTypeToJSON(value.nameValueDetails),
    };
}

