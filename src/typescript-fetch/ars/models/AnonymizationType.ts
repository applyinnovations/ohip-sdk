/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AnonymizationStatusType } from './AnonymizationStatusType';
import {
    AnonymizationStatusTypeFromJSON,
    AnonymizationStatusTypeFromJSONTyped,
    AnonymizationStatusTypeToJSON,
} from './AnonymizationStatusType';

/**
 * Provides information about guest's anonymization status.
 * @export
 * @interface AnonymizationType
 */
export interface AnonymizationType {
    /**
     * 
     * @type {AnonymizationStatusType}
     * @memberof AnonymizationType
     */
    anonymizationStatus?: AnonymizationStatusType;
    /**
     * Date and Time when the guest was anonymized.
     * @type {string}
     * @memberof AnonymizationType
     */
    anonymizationDate?: string;
}

/**
 * Check if a given object implements the AnonymizationType interface.
 */
export function instanceOfAnonymizationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnonymizationTypeFromJSON(json: any): AnonymizationType {
    return AnonymizationTypeFromJSONTyped(json, false);
}

export function AnonymizationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnonymizationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'anonymizationStatus': !exists(json, 'anonymizationStatus') ? undefined : AnonymizationStatusTypeFromJSON(json['anonymizationStatus']),
        'anonymizationDate': !exists(json, 'anonymizationDate') ? undefined : json['anonymizationDate'],
    };
}

export function AnonymizationTypeToJSON(value?: AnonymizationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'anonymizationStatus': AnonymizationStatusTypeToJSON(value.anonymizationStatus),
        'anonymizationDate': value.anonymizationDate,
    };
}

