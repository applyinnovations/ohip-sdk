/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * AR Old Balances Single Posting Type - Tax and Transaction Code details.
 * @export
 * @interface ARTaxCodeType
 */
export interface ARTaxCodeType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARTaxCodeType
     */
    taxAmount?: CurrencyAmountType;
    /**
     * Tax Code number
     * @type {number}
     * @memberof ARTaxCodeType
     */
    taxCode?: number;
    /**
     * Transaction Code Value
     * @type {string}
     * @memberof ARTaxCodeType
     */
    transactionCode?: string;
}

/**
 * Check if a given object implements the ARTaxCodeType interface.
 */
export function instanceOfARTaxCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARTaxCodeTypeFromJSON(json: any): ARTaxCodeType {
    return ARTaxCodeTypeFromJSONTyped(json, false);
}

export function ARTaxCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARTaxCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxAmount': !exists(json, 'taxAmount') ? undefined : CurrencyAmountTypeFromJSON(json['taxAmount']),
        'taxCode': !exists(json, 'taxCode') ? undefined : json['taxCode'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
    };
}

export function ARTaxCodeTypeToJSON(value?: ARTaxCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxAmount': CurrencyAmountTypeToJSON(value.taxAmount),
        'taxCode': value.taxCode,
        'transactionCode': value.transactionCode,
    };
}

