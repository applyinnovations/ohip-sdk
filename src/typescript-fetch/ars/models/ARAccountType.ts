/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ARAccountStatusType } from './ARAccountStatusType';
import {
    ARAccountStatusTypeFromJSON,
    ARAccountStatusTypeFromJSONTyped,
    ARAccountStatusTypeToJSON,
} from './ARAccountStatusType';
import type { ARAccountTypeLastReminderInfo } from './ARAccountTypeLastReminderInfo';
import {
    ARAccountTypeLastReminderInfoFromJSON,
    ARAccountTypeLastReminderInfoFromJSONTyped,
    ARAccountTypeLastReminderInfoToJSON,
} from './ARAccountTypeLastReminderInfo';
import type { ARAccountTypeLastStatementInfo } from './ARAccountTypeLastStatementInfo';
import {
    ARAccountTypeLastStatementInfoFromJSON,
    ARAccountTypeLastStatementInfoFromJSONTyped,
    ARAccountTypeLastStatementInfoToJSON,
} from './ARAccountTypeLastStatementInfo';
import type { ARAgingInfoType } from './ARAgingInfoType';
import {
    ARAgingInfoTypeFromJSON,
    ARAgingInfoTypeFromJSONTyped,
    ARAgingInfoTypeToJSON,
} from './ARAgingInfoType';
import type { ARBalanceType } from './ARBalanceType';
import {
    ARBalanceTypeFromJSON,
    ARBalanceTypeFromJSONTyped,
    ARBalanceTypeToJSON,
} from './ARBalanceType';
import type { ARInvoiceType } from './ARInvoiceType';
import {
    ARInvoiceTypeFromJSON,
    ARInvoiceTypeFromJSONTyped,
    ARInvoiceTypeToJSON,
} from './ARInvoiceType';
import type { ARPaymentType } from './ARPaymentType';
import {
    ARPaymentTypeFromJSON,
    ARPaymentTypeFromJSONTyped,
    ARPaymentTypeToJSON,
} from './ARPaymentType';
import type { ARYearViewInfoType } from './ARYearViewInfoType';
import {
    ARYearViewInfoTypeFromJSON,
    ARYearViewInfoTypeFromJSONTyped,
    ARYearViewInfoTypeToJSON,
} from './ARYearViewInfoType';
import type { AddressInfoType } from './AddressInfoType';
import {
    AddressInfoTypeFromJSON,
    AddressInfoTypeFromJSONTyped,
    AddressInfoTypeToJSON,
} from './AddressInfoType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { EmailInfoType } from './EmailInfoType';
import {
    EmailInfoTypeFromJSON,
    EmailInfoTypeFromJSONTyped,
    EmailInfoTypeToJSON,
} from './EmailInfoType';
import type { FixedChargeType } from './FixedChargeType';
import {
    FixedChargeTypeFromJSON,
    FixedChargeTypeFromJSONTyped,
    FixedChargeTypeToJSON,
} from './FixedChargeType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { SearchMatchType } from './SearchMatchType';
import {
    SearchMatchTypeFromJSON,
    SearchMatchTypeFromJSONTyped,
    SearchMatchTypeToJSON,
} from './SearchMatchType';
import type { TelephoneInfoType } from './TelephoneInfoType';
import {
    TelephoneInfoTypeFromJSON,
    TelephoneInfoTypeFromJSONTyped,
    TelephoneInfoTypeToJSON,
} from './TelephoneInfoType';
import type { TraceType } from './TraceType';
import {
    TraceTypeFromJSON,
    TraceTypeFromJSONTyped,
    TraceTypeToJSON,
} from './TraceType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Accounts Receivabales Account details type.
 * @export
 * @interface ARAccountType
 */
export interface ARAccountType {
    /**
     * Property where the AR Account exists.
     * @type {string}
     * @memberof ARAccountType
     */
    hotelId?: string;
    /**
     * Name of the AR Account.
     * @type {string}
     * @memberof ARAccountType
     */
    accountName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ARAccountType
     */
    accountId?: UniqueIDType;
    /**
     * The Account Number for the Account.
     * @type {string}
     * @memberof ARAccountType
     */
    accountNo?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof ARAccountType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARAccountType
     */
    balance?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ARAccountType
     */
    creditLimit?: CurrencyAmountType;
    /**
     * The person to contact for this Account.
     * @type {string}
     * @memberof ARAccountType
     */
    contactName?: string;
    /**
     * Number of days on which person can make payment.
     * @type {string}
     * @memberof ARAccountType
     */
    paymentDueDays?: string;
    /**
     * Month End Calculation.
     * @type {boolean}
     * @memberof ARAccountType
     */
    monthEndCalcYN?: boolean;
    /**
     * 
     * @type {AddressInfoType}
     * @memberof ARAccountType
     */
    address?: AddressInfoType;
    /**
     * 
     * @type {EmailInfoType}
     * @memberof ARAccountType
     */
    email?: EmailInfoType;
    /**
     * The Telephone and Fax details attached to the Account.
     * @type {Array<TelephoneInfoType>}
     * @memberof ARAccountType
     */
    telephones?: Array<TelephoneInfoType>;
    /**
     * 
     * @type {ARAccountTypeLastReminderInfo}
     * @memberof ARAccountType
     */
    lastReminderInfo?: ARAccountTypeLastReminderInfo;
    /**
     * 
     * @type {ARAccountTypeLastStatementInfo}
     * @memberof ARAccountType
     */
    lastStatementInfo?: ARAccountTypeLastStatementInfo;
    /**
     * The Note details attached to the Account.
     * @type {Array<CommentInfoType>}
     * @memberof ARAccountType
     */
    notes?: Array<CommentInfoType>;
    /**
     * The Trace details attached to the Account.
     * @type {Array<TraceType>}
     * @memberof ARAccountType
     */
    traces?: Array<TraceType>;
    /**
     * Holds fixed charge detail.
     * @type {Array<FixedChargeType>}
     * @memberof ARAccountType
     */
    fixedCharges?: Array<FixedChargeType>;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof ARAccountType
     */
    accountIndicators?: Array<IndicatorType>;
    /**
     * 
     * @type {ARAgingInfoType}
     * @memberof ARAccountType
     */
    agingInfo?: ARAgingInfoType;
    /**
     * 
     * @type {ARYearViewInfoType}
     * @memberof ARAccountType
     */
    yearViewInfo?: ARYearViewInfoType;
    /**
     * A collection of AR Invoices.
     * @type {Array<ARInvoiceType>}
     * @memberof ARAccountType
     */
    invoices?: Array<ARInvoiceType>;
    /**
     * A collection of AR Payments.
     * @type {Array<ARPaymentType>}
     * @memberof ARAccountType
     */
    payments?: Array<ARPaymentType>;
    /**
     * 
     * @type {ARBalanceType}
     * @memberof ARAccountType
     */
    summary?: ARBalanceType;
    /**
     * 
     * @type {ARAccountStatusType}
     * @memberof ARAccountType
     */
    status?: ARAccountStatusType;
    /**
     * Include In Batch Statement
     * @type {boolean}
     * @memberof ARAccountType
     */
    batchStatement?: boolean;
    /**
     * Indicates if associated folios should be printed by default with the statement.
     * @type {boolean}
     * @memberof ARAccountType
     */
    printFoliosWithStatement?: boolean;
    /**
     * Indicates if the Account has opted to send the statements and reminders to the Account email address by default.
     * @type {boolean}
     * @memberof ARAccountType
     */
    emailStatementsReminders?: boolean;
    /**
     * List of Generic Name-Value-Pair Parameters used for super search matches.
     * @type {Array<SearchMatchType>}
     * @memberof ARAccountType
     */
    searchMatches?: Array<SearchMatchType>;
    /**
     * Indicates if this Account is the Primary Account for this Guest/Company.
     * @type {boolean}
     * @memberof ARAccountType
     */
    primary?: boolean;
    /**
     * The type of Account.
     * @type {string}
     * @memberof ARAccountType
     */
    type?: string;
    /**
     * The description of the Account Type.
     * @type {string}
     * @memberof ARAccountType
     */
    accountTypeDescription?: string;
    /**
     * Indicates if this is a Permanent Account. Permanent Accounts cannot be deleted.
     * @type {boolean}
     * @memberof ARAccountType
     */
    permanent?: boolean;
}

/**
 * Check if a given object implements the ARAccountType interface.
 */
export function instanceOfARAccountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARAccountTypeFromJSON(json: any): ARAccountType {
    return ARAccountTypeFromJSONTyped(json, false);
}

export function ARAccountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARAccountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'accountName': !exists(json, 'accountName') ? undefined : json['accountName'],
        'accountId': !exists(json, 'accountId') ? undefined : UniqueIDTypeFromJSON(json['accountId']),
        'accountNo': !exists(json, 'accountNo') ? undefined : json['accountNo'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'creditLimit': !exists(json, 'creditLimit') ? undefined : CurrencyAmountTypeFromJSON(json['creditLimit']),
        'contactName': !exists(json, 'contactName') ? undefined : json['contactName'],
        'paymentDueDays': !exists(json, 'paymentDueDays') ? undefined : json['paymentDueDays'],
        'monthEndCalcYN': !exists(json, 'monthEndCalcYN') ? undefined : json['monthEndCalcYN'],
        'address': !exists(json, 'address') ? undefined : AddressInfoTypeFromJSON(json['address']),
        'email': !exists(json, 'email') ? undefined : EmailInfoTypeFromJSON(json['email']),
        'telephones': !exists(json, 'telephones') ? undefined : ((json['telephones'] as Array<any>).map(TelephoneInfoTypeFromJSON)),
        'lastReminderInfo': !exists(json, 'lastReminderInfo') ? undefined : ARAccountTypeLastReminderInfoFromJSON(json['lastReminderInfo']),
        'lastStatementInfo': !exists(json, 'lastStatementInfo') ? undefined : ARAccountTypeLastStatementInfoFromJSON(json['lastStatementInfo']),
        'notes': !exists(json, 'notes') ? undefined : ((json['notes'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'traces': !exists(json, 'traces') ? undefined : ((json['traces'] as Array<any>).map(TraceTypeFromJSON)),
        'fixedCharges': !exists(json, 'fixedCharges') ? undefined : ((json['fixedCharges'] as Array<any>).map(FixedChargeTypeFromJSON)),
        'accountIndicators': !exists(json, 'accountIndicators') ? undefined : ((json['accountIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'agingInfo': !exists(json, 'agingInfo') ? undefined : ARAgingInfoTypeFromJSON(json['agingInfo']),
        'yearViewInfo': !exists(json, 'yearViewInfo') ? undefined : ARYearViewInfoTypeFromJSON(json['yearViewInfo']),
        'invoices': !exists(json, 'invoices') ? undefined : ((json['invoices'] as Array<any>).map(ARInvoiceTypeFromJSON)),
        'payments': !exists(json, 'payments') ? undefined : ((json['payments'] as Array<any>).map(ARPaymentTypeFromJSON)),
        'summary': !exists(json, 'summary') ? undefined : ARBalanceTypeFromJSON(json['summary']),
        'status': !exists(json, 'status') ? undefined : ARAccountStatusTypeFromJSON(json['status']),
        'batchStatement': !exists(json, 'batchStatement') ? undefined : json['batchStatement'],
        'printFoliosWithStatement': !exists(json, 'printFoliosWithStatement') ? undefined : json['printFoliosWithStatement'],
        'emailStatementsReminders': !exists(json, 'emailStatementsReminders') ? undefined : json['emailStatementsReminders'],
        'searchMatches': !exists(json, 'searchMatches') ? undefined : ((json['searchMatches'] as Array<any>).map(SearchMatchTypeFromJSON)),
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'accountTypeDescription': !exists(json, 'accountTypeDescription') ? undefined : json['accountTypeDescription'],
        'permanent': !exists(json, 'permanent') ? undefined : json['permanent'],
    };
}

export function ARAccountTypeToJSON(value?: ARAccountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'accountName': value.accountName,
        'accountId': UniqueIDTypeToJSON(value.accountId),
        'accountNo': value.accountNo,
        'profileId': ProfileIdToJSON(value.profileId),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'creditLimit': CurrencyAmountTypeToJSON(value.creditLimit),
        'contactName': value.contactName,
        'paymentDueDays': value.paymentDueDays,
        'monthEndCalcYN': value.monthEndCalcYN,
        'address': AddressInfoTypeToJSON(value.address),
        'email': EmailInfoTypeToJSON(value.email),
        'telephones': value.telephones === undefined ? undefined : ((value.telephones as Array<any>).map(TelephoneInfoTypeToJSON)),
        'lastReminderInfo': ARAccountTypeLastReminderInfoToJSON(value.lastReminderInfo),
        'lastStatementInfo': ARAccountTypeLastStatementInfoToJSON(value.lastStatementInfo),
        'notes': value.notes === undefined ? undefined : ((value.notes as Array<any>).map(CommentInfoTypeToJSON)),
        'traces': value.traces === undefined ? undefined : ((value.traces as Array<any>).map(TraceTypeToJSON)),
        'fixedCharges': value.fixedCharges === undefined ? undefined : ((value.fixedCharges as Array<any>).map(FixedChargeTypeToJSON)),
        'accountIndicators': value.accountIndicators === undefined ? undefined : ((value.accountIndicators as Array<any>).map(IndicatorTypeToJSON)),
        'agingInfo': ARAgingInfoTypeToJSON(value.agingInfo),
        'yearViewInfo': ARYearViewInfoTypeToJSON(value.yearViewInfo),
        'invoices': value.invoices === undefined ? undefined : ((value.invoices as Array<any>).map(ARInvoiceTypeToJSON)),
        'payments': value.payments === undefined ? undefined : ((value.payments as Array<any>).map(ARPaymentTypeToJSON)),
        'summary': ARBalanceTypeToJSON(value.summary),
        'status': ARAccountStatusTypeToJSON(value.status),
        'batchStatement': value.batchStatement,
        'printFoliosWithStatement': value.printFoliosWithStatement,
        'emailStatementsReminders': value.emailStatementsReminders,
        'searchMatches': value.searchMatches === undefined ? undefined : ((value.searchMatches as Array<any>).map(SearchMatchTypeToJSON)),
        'primary': value.primary,
        'type': value.type,
        'accountTypeDescription': value.accountTypeDescription,
        'permanent': value.permanent,
    };
}

