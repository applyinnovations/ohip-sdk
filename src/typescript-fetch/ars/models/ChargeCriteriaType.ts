/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria information for posting a charge.
 * @export
 * @interface ChargeCriteriaType
 */
export interface ChargeCriteriaType {
    /**
     * Apply room routing when making this posting.
     * @type {boolean}
     * @memberof ChargeCriteriaType
     */
    applyRoutingInstructions?: boolean;
    /**
     * Corrected arrangement code from the package associated to this transaction.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    arrangementCode?: string;
    /**
     * Article ID.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    articleCode?: string;
    /**
     * True indicates the Transaction Code is allowed to be posted automatically.
     * @type {boolean}
     * @memberof ChargeCriteriaType
     */
    autoPosting?: boolean;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ChargeCriteriaType
     */
    cashierId?: number;
    /**
     * Indicates the Cheque number.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    checkNumber?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ChargeCriteriaType
     */
    financialTransactionIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {number}
     * @memberof ChargeCriteriaType
     */
    folioWindowNo?: number;
    /**
     * Quantity to post to the folio.
     * @type {number}
     * @memberof ChargeCriteriaType
     */
    postingQuantity?: number;
    /**
     * User-defined posting reference.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    postingReference?: string;
    /**
     * User-defined posting remark.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    postingRemark?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ChargeCriteriaType
     */
    price?: CurrencyAmountType;
    /**
     * Transaction Code to post.
     * @type {string}
     * @memberof ChargeCriteriaType
     */
    transactionCode?: string;
    /**
     * Use the applicable package allowance when making this posting.
     * @type {boolean}
     * @memberof ChargeCriteriaType
     */
    usePackageAllowance?: boolean;
}

/**
 * Check if a given object implements the ChargeCriteriaType interface.
 */
export function instanceOfChargeCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChargeCriteriaTypeFromJSON(json: any): ChargeCriteriaType {
    return ChargeCriteriaTypeFromJSONTyped(json, false);
}

export function ChargeCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargeCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'applyRoutingInstructions': !exists(json, 'applyRoutingInstructions') ? undefined : json['applyRoutingInstructions'],
        'arrangementCode': !exists(json, 'arrangementCode') ? undefined : json['arrangementCode'],
        'articleCode': !exists(json, 'articleCode') ? undefined : json['articleCode'],
        'autoPosting': !exists(json, 'autoPosting') ? undefined : json['autoPosting'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'checkNumber': !exists(json, 'checkNumber') ? undefined : json['checkNumber'],
        'financialTransactionIdList': !exists(json, 'financialTransactionIdList') ? undefined : ((json['financialTransactionIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'folioWindowNo': !exists(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'postingQuantity': !exists(json, 'postingQuantity') ? undefined : json['postingQuantity'],
        'postingReference': !exists(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !exists(json, 'postingRemark') ? undefined : json['postingRemark'],
        'price': !exists(json, 'price') ? undefined : CurrencyAmountTypeFromJSON(json['price']),
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'usePackageAllowance': !exists(json, 'usePackageAllowance') ? undefined : json['usePackageAllowance'],
    };
}

export function ChargeCriteriaTypeToJSON(value?: ChargeCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'applyRoutingInstructions': value.applyRoutingInstructions,
        'arrangementCode': value.arrangementCode,
        'articleCode': value.articleCode,
        'autoPosting': value.autoPosting,
        'cashierId': value.cashierId,
        'checkNumber': value.checkNumber,
        'financialTransactionIdList': value.financialTransactionIdList === undefined ? undefined : ((value.financialTransactionIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'folioWindowNo': value.folioWindowNo,
        'postingQuantity': value.postingQuantity,
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'price': CurrencyAmountTypeToJSON(value.price),
        'transactionCode': value.transactionCode,
        'usePackageAllowance': value.usePackageAllowance,
    };
}

