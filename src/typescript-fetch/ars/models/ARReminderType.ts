/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ARInvoiceType } from './ARInvoiceType';
import {
    ARInvoiceTypeFromJSON,
    ARInvoiceTypeFromJSONTyped,
    ARInvoiceTypeToJSON,
} from './ARInvoiceType';
import type { ReminderCycleType } from './ReminderCycleType';
import {
    ReminderCycleTypeFromJSON,
    ReminderCycleTypeFromJSONTyped,
    ReminderCycleTypeToJSON,
} from './ReminderCycleType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * AR Reminder Information Type.
 * @export
 * @interface ARReminderType
 */
export interface ARReminderType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ARReminderType
     */
    accountId?: UniqueIDType;
    /**
     * The minimum age(days) of the invoices to be included in the Reminder
     * @type {number}
     * @memberof ARReminderType
     */
    age?: number;
    /**
     * Reminder summary currency code.
     * @type {string}
     * @memberof ARReminderType
     */
    currencyCode?: string;
    /**
     * The current Reminder Cycle number for this reminder. This would be available when Simple Reminder functionality is ON.
     * @type {number}
     * @memberof ARReminderType
     */
    cycle?: number;
    /**
     * 
     * @type {ReminderCycleType}
     * @memberof ARReminderType
     */
    cycleUsed?: ReminderCycleType;
    /**
     * Property where the Account belongs.
     * @type {string}
     * @memberof ARReminderType
     */
    hotelId?: string;
    /**
     * A collection of AR Invoices.
     * @type {Array<ARInvoiceType>}
     * @memberof ARReminderType
     */
    invoices?: Array<ARInvoiceType>;
    /**
     * Indicates that reminders history exists.
     * @type {boolean}
     * @memberof ARReminderType
     */
    isHistoryExists?: boolean;
    /**
     * The Last Reminder Cycle used for this Account. This would be available when Simple Reminder functionality is ON.
     * @type {number}
     * @memberof ARReminderType
     */
    lastCycle?: number;
    /**
     * The date of the Last Reminder Sent.
     * @type {Date}
     * @memberof ARReminderType
     */
    lastReminderSent?: Date;
    /**
     * The Reminder Letter name which is to be used for this Reminder based on the setup on the Account Type.
     * @type {string}
     * @memberof ARReminderType
     */
    letterName?: string;
    /**
     * The maximum Age(days) of the invoices in the Reminder. This would be available when Simple Reminder functionality is OFF.
     * @type {number}
     * @memberof ARReminderType
     */
    maxAge?: number;
    /**
     * The Reminder report file name Letter name which is to be used for reprint.
     * @type {string}
     * @memberof ARReminderType
     */
    reportFileName?: string;
}

/**
 * Check if a given object implements the ARReminderType interface.
 */
export function instanceOfARReminderType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARReminderTypeFromJSON(json: any): ARReminderType {
    return ARReminderTypeFromJSONTyped(json, false);
}

export function ARReminderTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARReminderType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : UniqueIDTypeFromJSON(json['accountId']),
        'age': !exists(json, 'age') ? undefined : json['age'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'cycle': !exists(json, 'cycle') ? undefined : json['cycle'],
        'cycleUsed': !exists(json, 'cycleUsed') ? undefined : ReminderCycleTypeFromJSON(json['cycleUsed']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'invoices': !exists(json, 'invoices') ? undefined : ((json['invoices'] as Array<any>).map(ARInvoiceTypeFromJSON)),
        'isHistoryExists': !exists(json, 'isHistoryExists') ? undefined : json['isHistoryExists'],
        'lastCycle': !exists(json, 'lastCycle') ? undefined : json['lastCycle'],
        'lastReminderSent': !exists(json, 'lastReminderSent') ? undefined : (new Date(json['lastReminderSent'])),
        'letterName': !exists(json, 'letterName') ? undefined : json['letterName'],
        'maxAge': !exists(json, 'maxAge') ? undefined : json['maxAge'],
        'reportFileName': !exists(json, 'reportFileName') ? undefined : json['reportFileName'],
    };
}

export function ARReminderTypeToJSON(value?: ARReminderType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': UniqueIDTypeToJSON(value.accountId),
        'age': value.age,
        'currencyCode': value.currencyCode,
        'cycle': value.cycle,
        'cycleUsed': ReminderCycleTypeToJSON(value.cycleUsed),
        'hotelId': value.hotelId,
        'invoices': value.invoices === undefined ? undefined : ((value.invoices as Array<any>).map(ARInvoiceTypeToJSON)),
        'isHistoryExists': value.isHistoryExists,
        'lastCycle': value.lastCycle,
        'lastReminderSent': value.lastReminderSent === undefined ? undefined : (value.lastReminderSent.toISOString().substring(0,10)),
        'letterName': value.letterName,
        'maxAge': value.maxAge,
        'reportFileName': value.reportFileName,
    };
}

