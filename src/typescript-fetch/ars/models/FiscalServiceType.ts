/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FiscalFolioInstruction } from './FiscalFolioInstruction';
import {
    FiscalFolioInstructionFromJSON,
    FiscalFolioInstructionFromJSONTyped,
    FiscalFolioInstructionToJSON,
} from './FiscalFolioInstruction';
import type { FolioQueueType } from './FolioQueueType';
import {
    FolioQueueTypeFromJSON,
    FolioQueueTypeFromJSONTyped,
    FolioQueueTypeToJSON,
} from './FolioQueueType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Generate Fiscal Folio Criteria type to be used for fiscal folio generation
 * @export
 * @interface FiscalServiceType
 */
export interface FiscalServiceType {
    /**
     * Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected.
     * @type {string}
     * @memberof FiscalServiceType
     */
    fiscalTerminal?: string;
    /**
     * Fiscal Invoicing Currency code to be used by the Fiscal Service.
     * @type {string}
     * @memberof FiscalServiceType
     */
    invoiceCurrencyCode?: string;
    /**
     * 
     * @type {FiscalFolioInstruction}
     * @memberof FiscalServiceType
     */
    instructions?: FiscalFolioInstruction;
    /**
     * 
     * @type {FolioQueueType}
     * @memberof FiscalServiceType
     */
    folioQueueName?: FolioQueueType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof FiscalServiceType
     */
    folioSeqId?: UniqueIDType;
}

/**
 * Check if a given object implements the FiscalServiceType interface.
 */
export function instanceOfFiscalServiceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FiscalServiceTypeFromJSON(json: any): FiscalServiceType {
    return FiscalServiceTypeFromJSONTyped(json, false);
}

export function FiscalServiceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiscalServiceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fiscalTerminal': !exists(json, 'fiscalTerminal') ? undefined : json['fiscalTerminal'],
        'invoiceCurrencyCode': !exists(json, 'invoiceCurrencyCode') ? undefined : json['invoiceCurrencyCode'],
        'instructions': !exists(json, 'instructions') ? undefined : FiscalFolioInstructionFromJSON(json['instructions']),
        'folioQueueName': !exists(json, 'folioQueueName') ? undefined : FolioQueueTypeFromJSON(json['folioQueueName']),
        'folioSeqId': !exists(json, 'folioSeqId') ? undefined : UniqueIDTypeFromJSON(json['folioSeqId']),
    };
}

export function FiscalServiceTypeToJSON(value?: FiscalServiceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fiscalTerminal': value.fiscalTerminal,
        'invoiceCurrencyCode': value.invoiceCurrencyCode,
        'instructions': FiscalFolioInstructionToJSON(value.instructions),
        'folioQueueName': FolioQueueTypeToJSON(value.folioQueueName),
        'folioSeqId': UniqueIDTypeToJSON(value.folioSeqId),
    };
}

