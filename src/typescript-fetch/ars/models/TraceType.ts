/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { TraceResolveType } from './TraceResolveType';
import {
    TraceResolveTypeFromJSON,
    TraceResolveTypeFromJSONTyped,
    TraceResolveTypeToJSON,
} from './TraceResolveType';
import type { TraceTimeInfoType } from './TraceTimeInfoType';
import {
    TraceTimeInfoTypeFromJSON,
    TraceTimeInfoTypeFromJSONTyped,
    TraceTimeInfoTypeToJSON,
} from './TraceTimeInfoType';

/**
 * 
 * @export
 * @interface TraceType
 */
export interface TraceType {
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof TraceType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof TraceType
     */
    creatorId?: string;
    /**
     * Indicates the Department code.
     * @type {string}
     * @memberof TraceType
     */
    departmentId?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof TraceType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof TraceType
     */
    idContext?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof TraceType
     */
    idExtension?: number;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof TraceType
     */
    instance?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof TraceType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof TraceType
     */
    lastModifyDateTime?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof TraceType
     */
    purgeDate?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof TraceType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {TraceResolveType}
     * @memberof TraceType
     */
    resolveInfo?: TraceResolveType;
    /**
     * 
     * @type {TraceTimeInfoType}
     * @memberof TraceType
     */
    timeInfo?: TraceTimeInfoType;
    /**
     * The information this trace contains.
     * @type {string}
     * @memberof TraceType
     */
    traceText?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof TraceType
     */
    type?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof TraceType
     */
    url?: string;
}

/**
 * Check if a given object implements the TraceType interface.
 */
export function instanceOfTraceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TraceTypeFromJSON(json: any): TraceType {
    return TraceTypeFromJSONTyped(json, false);
}

export function TraceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'departmentId': !exists(json, 'departmentId') ? undefined : json['departmentId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : json['purgeDate'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'resolveInfo': !exists(json, 'resolveInfo') ? undefined : TraceResolveTypeFromJSON(json['resolveInfo']),
        'timeInfo': !exists(json, 'timeInfo') ? undefined : TraceTimeInfoTypeFromJSON(json['timeInfo']),
        'traceText': !exists(json, 'traceText') ? undefined : json['traceText'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function TraceTypeToJSON(value?: TraceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'departmentId': value.departmentId,
        'id': value.id,
        'idContext': value.idContext,
        'idExtension': value.idExtension,
        'instance': value.instance,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'purgeDate': value.purgeDate,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'resolveInfo': TraceResolveTypeToJSON(value.resolveInfo),
        'timeInfo': TraceTimeInfoTypeToJSON(value.timeInfo),
        'traceText': value.traceText,
        'type': value.type,
        'url': value.url,
    };
}

