/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * 
 * @export
 * @interface AuthorizationInfoType
 */
export interface AuthorizationInfoType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AuthorizationInfoType
     */
    approvalAmount?: CurrencyAmountType;
    /**
     * The approval code authenticates the authorization.
     * @type {string}
     * @memberof AuthorizationInfoType
     */
    approvalCode?: string;
    /**
     * Unique Authorization Sequence for the authorization and settlement.
     * @type {number}
     * @memberof AuthorizationInfoType
     */
    originalAuthSequence?: number;
    /**
     * Vendor transaction id for the authorization.
     * @type {string}
     * @memberof AuthorizationInfoType
     */
    vendorTranId?: string;
}

/**
 * Check if a given object implements the AuthorizationInfoType interface.
 */
export function instanceOfAuthorizationInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizationInfoTypeFromJSON(json: any): AuthorizationInfoType {
    return AuthorizationInfoTypeFromJSONTyped(json, false);
}

export function AuthorizationInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizationInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'approvalAmount': !exists(json, 'approvalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['approvalAmount']),
        'approvalCode': !exists(json, 'approvalCode') ? undefined : json['approvalCode'],
        'originalAuthSequence': !exists(json, 'originalAuthSequence') ? undefined : json['originalAuthSequence'],
        'vendorTranId': !exists(json, 'vendorTranId') ? undefined : json['vendorTranId'],
    };
}

export function AuthorizationInfoTypeToJSON(value?: AuthorizationInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'approvalAmount': CurrencyAmountTypeToJSON(value.approvalAmount),
        'approvalCode': value.approvalCode,
        'originalAuthSequence': value.originalAuthSequence,
        'vendorTranId': value.vendorTranId,
    };
}

