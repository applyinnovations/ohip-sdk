/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChargeCriteriaType } from './ChargeCriteriaType';
import {
    ChargeCriteriaTypeFromJSON,
    ChargeCriteriaTypeFromJSONTyped,
    ChargeCriteriaTypeToJSON,
} from './ChargeCriteriaType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria for posting a charge to list of accounts.
 * @export
 * @interface ARPostChargesInBatchCriteriaType
 */
export interface ARPostChargesInBatchCriteriaType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ARPostChargesInBatchCriteriaType
     */
    accountIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {ChargeCriteriaType}
     * @memberof ARPostChargesInBatchCriteriaType
     */
    chargeInfo?: ChargeCriteriaType;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ARPostChargesInBatchCriteriaType
     */
    cashierId?: number;
    /**
     * 
     * @type {string}
     * @memberof ARPostChargesInBatchCriteriaType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the ARPostChargesInBatchCriteriaType interface.
 */
export function instanceOfARPostChargesInBatchCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARPostChargesInBatchCriteriaTypeFromJSON(json: any): ARPostChargesInBatchCriteriaType {
    return ARPostChargesInBatchCriteriaTypeFromJSONTyped(json, false);
}

export function ARPostChargesInBatchCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARPostChargesInBatchCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountIdList': !exists(json, 'accountIdList') ? undefined : ((json['accountIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'chargeInfo': !exists(json, 'chargeInfo') ? undefined : ChargeCriteriaTypeFromJSON(json['chargeInfo']),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function ARPostChargesInBatchCriteriaTypeToJSON(value?: ARPostChargesInBatchCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountIdList': value.accountIdList === undefined ? undefined : ((value.accountIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'chargeInfo': ChargeCriteriaTypeToJSON(value.chargeInfo),
        'cashierId': value.cashierId,
        'hotelId': value.hotelId,
    };
}

