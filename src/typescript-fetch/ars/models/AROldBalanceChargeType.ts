/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ARTaxCodeType } from './ARTaxCodeType';
import {
    ARTaxCodeTypeFromJSON,
    ARTaxCodeTypeFromJSONTyped,
    ARTaxCodeTypeToJSON,
} from './ARTaxCodeType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * AR Old Balances Single Posting Type.
 * @export
 * @interface AROldBalanceChargeType
 */
export interface AROldBalanceChargeType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AROldBalanceChargeType
     */
    amount?: CurrencyAmountType;
    /**
     * Date of the Posting.
     * @type {string}
     * @memberof AROldBalanceChargeType
     */
    date?: string;
    /**
     * The Fiscal Bill number of this posting
     * @type {string}
     * @memberof AROldBalanceChargeType
     */
    fiscalBillNo?: string;
    /**
     * The Folio number of this posting, if there was a Folio entered.
     * @type {number}
     * @memberof AROldBalanceChargeType
     */
    folioNo?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AROldBalanceChargeType
     */
    paid?: CurrencyAmountType;
    /**
     * User-defined posting reference.
     * @type {string}
     * @memberof AROldBalanceChargeType
     */
    postingReference?: string;
    /**
     * User-defined Supplement.
     * @type {string}
     * @memberof AROldBalanceChargeType
     */
    postingRemark?: string;
    /**
     * Values of atmost 20 Taxes entered.
     * @type {Array<ARTaxCodeType>}
     * @memberof AROldBalanceChargeType
     */
    taxCodes?: Array<ARTaxCodeType>;
}

/**
 * Check if a given object implements the AROldBalanceChargeType interface.
 */
export function instanceOfAROldBalanceChargeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AROldBalanceChargeTypeFromJSON(json: any): AROldBalanceChargeType {
    return AROldBalanceChargeTypeFromJSONTyped(json, false);
}

export function AROldBalanceChargeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AROldBalanceChargeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'date': !exists(json, 'date') ? undefined : json['date'],
        'fiscalBillNo': !exists(json, 'fiscalBillNo') ? undefined : json['fiscalBillNo'],
        'folioNo': !exists(json, 'folioNo') ? undefined : json['folioNo'],
        'paid': !exists(json, 'paid') ? undefined : CurrencyAmountTypeFromJSON(json['paid']),
        'postingReference': !exists(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !exists(json, 'postingRemark') ? undefined : json['postingRemark'],
        'taxCodes': !exists(json, 'taxCodes') ? undefined : ((json['taxCodes'] as Array<any>).map(ARTaxCodeTypeFromJSON)),
    };
}

export function AROldBalanceChargeTypeToJSON(value?: AROldBalanceChargeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'date': value.date,
        'fiscalBillNo': value.fiscalBillNo,
        'folioNo': value.folioNo,
        'paid': CurrencyAmountTypeToJSON(value.paid),
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'taxCodes': value.taxCodes === undefined ? undefined : ((value.taxCodes as Array<any>).map(ARTaxCodeTypeToJSON)),
    };
}

