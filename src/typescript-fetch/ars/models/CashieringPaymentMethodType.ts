/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Accounts Receivables API
 * APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors\' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizationInfoType } from './AuthorizationInfoType';
import {
    AuthorizationInfoTypeFromJSON,
    AuthorizationInfoTypeFromJSONTyped,
    AuthorizationInfoTypeToJSON,
} from './AuthorizationInfoType';
import type { AuthorizationRuleType } from './AuthorizationRuleType';
import {
    AuthorizationRuleTypeFromJSON,
    AuthorizationRuleTypeFromJSONTyped,
    AuthorizationRuleTypeToJSON,
} from './AuthorizationRuleType';
import type { CashieringPaymentMethodTypeEmailFolioInfo } from './CashieringPaymentMethodTypeEmailFolioInfo';
import {
    CashieringPaymentMethodTypeEmailFolioInfoFromJSON,
    CashieringPaymentMethodTypeEmailFolioInfoFromJSONTyped,
    CashieringPaymentMethodTypeEmailFolioInfoToJSON,
} from './CashieringPaymentMethodTypeEmailFolioInfo';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ResPaymentCardType } from './ResPaymentCardType';
import {
    ResPaymentCardTypeFromJSON,
    ResPaymentCardTypeFromJSONTyped,
    ResPaymentCardTypeToJSON,
} from './ResPaymentCardType';

/**
 * 
 * @export
 * @interface CashieringPaymentMethodType
 */
export interface CashieringPaymentMethodType {
    /**
     * 
     * @type {AuthorizationInfoType}
     * @memberof CashieringPaymentMethodType
     */
    authorizationApproval?: AuthorizationInfoType;
    /**
     * 
     * @type {AuthorizationRuleType}
     * @memberof CashieringPaymentMethodType
     */
    authorizationRule?: AuthorizationRuleType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CashieringPaymentMethodType
     */
    balance?: CurrencyAmountType;
    /**
     * 
     * @type {string}
     * @memberof CashieringPaymentMethodType
     */
    description?: string;
    /**
     * 
     * @type {CashieringPaymentMethodTypeEmailFolioInfo}
     * @memberof CashieringPaymentMethodType
     */
    emailFolioInfo?: CashieringPaymentMethodTypeEmailFolioInfo;
    /**
     * 
     * @type {number}
     * @memberof CashieringPaymentMethodType
     */
    folioView?: number;
    /**
     * 
     * @type {ResPaymentCardType}
     * @memberof CashieringPaymentMethodType
     */
    paymentCard?: ResPaymentCardType;
    /**
     * 
     * @type {string}
     * @memberof CashieringPaymentMethodType
     */
    paymentMethod?: string;
    /**
     * Track2 data for the card which would be sent to the CC vendor as part of the authorization.
     * @type {string}
     * @memberof CashieringPaymentMethodType
     */
    track2Data?: string;
}

/**
 * Check if a given object implements the CashieringPaymentMethodType interface.
 */
export function instanceOfCashieringPaymentMethodType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CashieringPaymentMethodTypeFromJSON(json: any): CashieringPaymentMethodType {
    return CashieringPaymentMethodTypeFromJSONTyped(json, false);
}

export function CashieringPaymentMethodTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashieringPaymentMethodType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationApproval': !exists(json, 'authorizationApproval') ? undefined : AuthorizationInfoTypeFromJSON(json['authorizationApproval']),
        'authorizationRule': !exists(json, 'authorizationRule') ? undefined : AuthorizationRuleTypeFromJSON(json['authorizationRule']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'emailFolioInfo': !exists(json, 'emailFolioInfo') ? undefined : CashieringPaymentMethodTypeEmailFolioInfoFromJSON(json['emailFolioInfo']),
        'folioView': !exists(json, 'folioView') ? undefined : json['folioView'],
        'paymentCard': !exists(json, 'paymentCard') ? undefined : ResPaymentCardTypeFromJSON(json['paymentCard']),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : json['paymentMethod'],
        'track2Data': !exists(json, 'track2Data') ? undefined : json['track2Data'],
    };
}

export function CashieringPaymentMethodTypeToJSON(value?: CashieringPaymentMethodType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationApproval': AuthorizationInfoTypeToJSON(value.authorizationApproval),
        'authorizationRule': AuthorizationRuleTypeToJSON(value.authorizationRule),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'description': value.description,
        'emailFolioInfo': CashieringPaymentMethodTypeEmailFolioInfoToJSON(value.emailFolioInfo),
        'folioView': value.folioView,
        'paymentCard': ResPaymentCardTypeToJSON(value.paymentCard),
        'paymentMethod': value.paymentMethod,
        'track2Data': value.track2Data,
    };
}

