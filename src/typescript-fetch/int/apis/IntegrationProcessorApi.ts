/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Processor API
 * APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BusinessEvents,
  ExceptionDetailType,
} from '../models/index';
import {
    BusinessEventsFromJSON,
    BusinessEventsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
} from '../models/index';

export interface GetBusinessEventsRequest {
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBusinessEventsByExternalSystemRequest {
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class IntegrationProcessorApi extends runtime.BaseAPI {

    /**
     * Business Event messages are placed in a queue. Use this API to fetch(dequeue) the Business Event messages based on the External System and Hotel ID. In order to get property specific business event messages, you must have a unique consumer code (OPERA Cloud UI > Toolbox > External Database) for the External System and the Hotel ID. <p><strong>OperationId:</strong>getBusinessEvents</p>
     * Get Business Events by External System and Hotel ID
     */
    async getBusinessEventsRaw(requestParameters: GetBusinessEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessEvents>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBusinessEvents.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBusinessEvents.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystem/{extSystemCode}/hotels/{hotelId}/businessEvents`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessEventsFromJSON(jsonValue));
    }

    /**
     * Business Event messages are placed in a queue. Use this API to fetch(dequeue) the Business Event messages based on the External System and Hotel ID. In order to get property specific business event messages, you must have a unique consumer code (OPERA Cloud UI > Toolbox > External Database) for the External System and the Hotel ID. <p><strong>OperationId:</strong>getBusinessEvents</p>
     * Get Business Events by External System and Hotel ID
     */
    async getBusinessEvents(requestParameters: GetBusinessEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessEvents> {
        const response = await this.getBusinessEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Business Event messages are placed in a queue. Use this API to dequeue/fetch the Business Event messages based on the external system for all hotels within the same chain. In order to get events, you must have a unique consumer code for the External System and hotels. <p><strong>OperationId:</strong>getBusinessEventsByExternalSystem</p>
     * Get Business Events by External System
     */
    async getBusinessEventsByExternalSystemRaw(requestParameters: GetBusinessEventsByExternalSystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessEvents>> {
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBusinessEventsByExternalSystem.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystem/{extSystemCode}/businessEvents`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessEventsFromJSON(jsonValue));
    }

    /**
     * Business Event messages are placed in a queue. Use this API to dequeue/fetch the Business Event messages based on the external system for all hotels within the same chain. In order to get events, you must have a unique consumer code for the External System and hotels. <p><strong>OperationId:</strong>getBusinessEventsByExternalSystem</p>
     * Get Business Events by External System
     */
    async getBusinessEventsByExternalSystem(requestParameters: GetBusinessEventsByExternalSystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessEvents> {
        const response = await this.getBusinessEventsByExternalSystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
