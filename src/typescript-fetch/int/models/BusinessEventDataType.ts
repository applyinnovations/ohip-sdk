/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Processor API
 * APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BusinessEventIDType } from './BusinessEventIDType';
import {
    BusinessEventIDTypeFromJSON,
    BusinessEventIDTypeFromJSONTyped,
    BusinessEventIDTypeToJSON,
} from './BusinessEventIDType';
import type { BusinessEventType } from './BusinessEventType';
import {
    BusinessEventTypeFromJSON,
    BusinessEventTypeFromJSONTyped,
    BusinessEventTypeToJSON,
} from './BusinessEventType';

/**
 * 
 * @export
 * @interface BusinessEventDataType
 */
export interface BusinessEventDataType {
    /**
     * 
     * @type {BusinessEventType}
     * @memberof BusinessEventDataType
     */
    businessEvent?: BusinessEventType;
    /**
     * 
     * @type {BusinessEventIDType}
     * @memberof BusinessEventDataType
     */
    businessEventId?: BusinessEventIDType;
}

/**
 * Check if a given object implements the BusinessEventDataType interface.
 */
export function instanceOfBusinessEventDataType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BusinessEventDataTypeFromJSON(json: any): BusinessEventDataType {
    return BusinessEventDataTypeFromJSONTyped(json, false);
}

export function BusinessEventDataTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessEventDataType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'businessEvent': !exists(json, 'businessEvent') ? undefined : BusinessEventTypeFromJSON(json['businessEvent']),
        'businessEventId': !exists(json, 'businessEventId') ? undefined : BusinessEventIDTypeFromJSON(json['businessEventId']),
    };
}

export function BusinessEventDataTypeToJSON(value?: BusinessEventDataType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'businessEvent': BusinessEventTypeToJSON(value.businessEvent),
        'businessEventId': BusinessEventIDTypeToJSON(value.businessEventId),
    };
}

