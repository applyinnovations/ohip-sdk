/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Processor API
 * APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BusinessEventDetailType } from './BusinessEventDetailType';
import {
    BusinessEventDetailTypeFromJSON,
    BusinessEventDetailTypeFromJSONTyped,
    BusinessEventDetailTypeToJSON,
} from './BusinessEventDetailType';
import type { BusinessEventHeaderType } from './BusinessEventHeaderType';
import {
    BusinessEventHeaderTypeFromJSON,
    BusinessEventHeaderTypeFromJSONTyped,
    BusinessEventHeaderTypeToJSON,
} from './BusinessEventHeaderType';

/**
 * 
 * @export
 * @interface BusinessEventType
 */
export interface BusinessEventType {
    /**
     * 
     * @type {Array<BusinessEventDetailType>}
     * @memberof BusinessEventType
     */
    details?: Array<BusinessEventDetailType>;
    /**
     * 
     * @type {BusinessEventHeaderType}
     * @memberof BusinessEventType
     */
    header?: BusinessEventHeaderType;
}

/**
 * Check if a given object implements the BusinessEventType interface.
 */
export function instanceOfBusinessEventType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BusinessEventTypeFromJSON(json: any): BusinessEventType {
    return BusinessEventTypeFromJSONTyped(json, false);
}

export function BusinessEventTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessEventType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'details': !exists(json, 'details') ? undefined : ((json['details'] as Array<any>).map(BusinessEventDetailTypeFromJSON)),
        'header': !exists(json, 'header') ? undefined : BusinessEventHeaderTypeFromJSON(json['header']),
    };
}

export function BusinessEventTypeToJSON(value?: BusinessEventType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'details': value.details === undefined ? undefined : ((value.details as Array<any>).map(BusinessEventDetailTypeToJSON)),
        'header': BusinessEventHeaderTypeToJSON(value.header),
    };
}

