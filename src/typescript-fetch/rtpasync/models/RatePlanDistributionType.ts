/* tslint:disable */
/* eslint-disable */
/**
 * Opera Cloud Rate Plan Asynchronous Service API
 * APIs catering to the Rate Plan asynchronous related functionality in a hotel.  This includes adding/updating daily rates&apos; pricing schedules and best available rates by day or length of stay. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RatePlanDistributionType
 */
export interface RatePlanDistributionType {
    /**
     * Restriction updates for the rate plan to be sent to channels?
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    restrictionUpdate?: boolean;
    /**
     * Rate updates for the rate plan to be sent to channels?
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    rateUpdate?: boolean;
    /**
     * Rate plan to be uploaded to MyFidleio and published.
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    myFidelioUploadAllowed?: boolean;
    /**
     * Rate plan Code is available for channels.
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    channelAllowed?: boolean;
}

/**
 * Check if a given object implements the RatePlanDistributionType interface.
 */
export function instanceOfRatePlanDistributionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanDistributionTypeFromJSON(json: any): RatePlanDistributionType {
    return RatePlanDistributionTypeFromJSONTyped(json, false);
}

export function RatePlanDistributionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanDistributionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'restrictionUpdate': !exists(json, 'restrictionUpdate') ? undefined : json['restrictionUpdate'],
        'rateUpdate': !exists(json, 'rateUpdate') ? undefined : json['rateUpdate'],
        'myFidelioUploadAllowed': !exists(json, 'myFidelioUploadAllowed') ? undefined : json['myFidelioUploadAllowed'],
        'channelAllowed': !exists(json, 'channelAllowed') ? undefined : json['channelAllowed'],
    };
}

export function RatePlanDistributionTypeToJSON(value?: RatePlanDistributionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'restrictionUpdate': value.restrictionUpdate,
        'rateUpdate': value.rateUpdate,
        'myFidelioUploadAllowed': value.myFidelioUploadAllowed,
        'channelAllowed': value.channelAllowed,
    };
}

